{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thava\\\\OneDrive\\\\Desktop\\\\New folder\\\\Complaint-Management-System\\\\frontend\\\\src\\\\components\\\\chatbot\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from '../../services/axios';\nimport { toast } from 'react-toastify';\nimport ChatMessage from './ChatMessage';\nimport VoiceInput from './VoiceInput';\nimport ImageUpload from './ImageUpload';\nimport { useAI } from '../hooks/useAI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = ({\n  onClose\n}) => {\n  _s();\n  // Initialize with default welcome message\n  const [messages, setMessages] = useState([{\n    type: 'bot',\n    content: 'Hello! I\\'m your AI assistant. How can I help you today? You can type your complaint, use voice input, or upload an image of the issue.',\n    timestamp: new Date(),\n    options: []\n  }]);\n\n  // Input state and refs\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isVoiceInputActive, setIsVoiceInputActive] = useState(false);\n  const [isImageUploadActive, setIsImageUploadActive] = useState(false);\n  const [showAIFeatures, setShowAIFeatures] = useState(false);\n\n  // Initialize complaint categories state\n  const [loading, setLoading] = useState(false);\n  const [complaintCategories, setComplaintCategories] = useState({\n    'billing': {\n      name: 'Billing Issue',\n      subcategories: {\n        'overcharged': {\n          name: 'Overcharged',\n          problem: 'Charged more than expected.',\n          solution: ['Check your subscription details.', 'Verify payment method charges.', 'Contact billing support with invoice ID.']\n        },\n        'duplicate_charges': {\n          name: 'Duplicate Charges',\n          problem: 'Charged multiple times for same service.',\n          solution: ['Check bank statement for duplicate entries.', 'Note transaction IDs.', 'Contact billing with transaction details.']\n        },\n        'wrong_plan': {\n          name: 'Wrong Plan Charged',\n          problem: 'Billed for the wrong plan.',\n          solution: ['Go to Subscription settings.', 'Validate the plan selected.', 'Raise a support request if incorrect.']\n        }\n      }\n    },\n    'technical': {\n      name: 'Technical Problem',\n      subcategories: {\n        'app_crash': {\n          name: 'App Crash / Freeze',\n          problem: 'App crashes or freezes on startup.',\n          solution: ['Restart the app.', 'Clear app cache and try again.', 'Reinstall if issue persists.']\n        },\n        'feature_not_working': {\n          name: 'Feature Not Working',\n          problem: 'Certain functionality is not responding.',\n          solution: ['Log out and log back in.', 'Ensure the latest update is installed.', 'Restart device.']\n        },\n        'slow_performance': {\n          name: 'Slow Performance',\n          problem: 'App is very slow to respond.',\n          solution: ['Clear cache and background apps.', 'Ensure internet connection is stable.']\n        }\n      }\n    },\n    'service': {\n      name: 'Service Complaint',\n      subcategories: {\n        'unavailable_service': {\n          name: 'Unavailable Service',\n          problem: 'Service not available in region.',\n          solution: ['Check service availability page.', 'Contact support for region rollout info.']\n        },\n        'poor_quality': {\n          name: 'Poor Service Quality',\n          problem: 'Service is not up to mark.',\n          solution: ['Share feedback via in-app feedback form.', 'Wait for service team response.']\n        },\n        'delay': {\n          name: 'Delay in Service',\n          problem: 'Delayed support or processing.',\n          solution: ['Check SLA mentioned in your plan.', 'If overdue, contact customer care.']\n        }\n      }\n    },\n    'feedback': {\n      name: 'General Feedback',\n      subcategories: {\n        'suggestion': {\n          name: 'Suggestion',\n          problem: 'User wants to share ideas.',\n          solution: ['Fill out suggestion form.', 'Await response from innovation team.']\n        },\n        'complaint': {\n          name: 'Complaint',\n          problem: 'General dissatisfaction.',\n          solution: ['Submit feedback through chatbot.', 'Escalation possible through \"Open Ticket\".']\n        },\n        'appreciation': {\n          name: 'Appreciation',\n          problem: 'Positive feedback.',\n          solution: ['Thank you! Your message is shared with the team.']\n        }\n      }\n    },\n    'account': {\n      name: 'Account Inquiry',\n      subcategories: {\n        'login_issue': {\n          name: 'Login Issue',\n          problem: 'Cannot log in.',\n          solution: ['Use \"Forgot Password\".', 'Try social login if applicable.']\n        },\n        'profile_update': {\n          name: 'Profile Update',\n          problem: 'Unable to update details.',\n          solution: ['Go to profile settings > Edit.', 'Ensure all required fields are filled.']\n        },\n        'account_deactivation': {\n          name: 'Account Deactivation',\n          problem: 'Want to close account.',\n          solution: ['Visit Account Settings > Deactivate Account.']\n        }\n      }\n    },\n    'other': {\n      name: 'Other Issue',\n      subcategories: {\n        'not_listed': {\n          name: 'Not Listed Above',\n          problem: 'Unique issue not covered.',\n          solution: ['Click \"Open Ticket\".', 'Fill in issue description.', 'Wait for ticket assignment.']\n        }\n      }\n    }\n  });\n\n  // Update initial message with categories from state\n  useEffect(() => {\n    // Update initial message with categories\n    setMessages(prev => {\n      const updatedMessages = [...prev];\n      if (updatedMessages.length > 0) {\n        updatedMessages[0] = {\n          ...updatedMessages[0],\n          options: Object.entries(complaintCategories).map(([id, category]) => ({\n            id: id,\n            text: category.name\n          }))\n        };\n      }\n      return updatedMessages;\n    });\n  }, [complaintCategories]);\n\n  // Fetch categories from API\n  useEffect(() => {\n    const fetchCategories = async () => {\n      try {\n        setLoading(true);\n        const response = await axios.get('/api/categories');\n        setComplaintCategories(response.data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching categories:', error);\n        toast.error('Failed to load categories. Using default categories.');\n        setLoading(false);\n      }\n    };\n    fetchCategories();\n  }, []);\n\n  // Use the AI hook for ticket processing\n  const {\n    isProcessing,\n    createTicket,\n    categorizeComplaint,\n    determinePriority,\n    determineAssignment\n  } = useAI();\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  // Scroll to bottom of messages\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Focus input field when component mounts\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n\n  // Handle option selection from the chatbot options\n  const handleOptionSelect = async (optionId, optionText) => {\n    // Add user message showing their selection\n    const userMessage = {\n      type: 'user',\n      content: `I need help with: ${optionText}`,\n      timestamp: new Date(),\n      isOption: true\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    try {\n      // Check if this is a main category or subcategory\n      const isMainCategory = Object.keys(complaintCategories).includes(optionId);\n      const [mainCategory, subCategory] = isMainCategory ? [optionId, null] : optionId.split('.');\n\n      // Process the selected option\n      const category = mainCategory; // Use the main category ID\n      const priority = category === 'technical' || category === 'service' ? 'high' : 'medium';\n\n      // If this is a main category, show subcategories\n      if (isMainCategory) {\n        const categoryData = complaintCategories[mainCategory];\n        const subcategories = categoryData.subcategories;\n\n        // Create options for subcategories\n        const subcategoryOptions = Object.entries(subcategories).map(([id, data]) => ({\n          id: `${mainCategory}.${id}`,\n          text: data.name\n        }));\n\n        // Add bot response with subcategories\n        const botResponse = {\n          type: 'bot',\n          content: `Please select a specific issue related to ${categoryData.name}:`,\n          timestamp: new Date(),\n          options: subcategoryOptions,\n          category: mainCategory\n        };\n        setMessages(prev => [...prev, botResponse]);\n      } else {\n        // This is a subcategory selection\n        const categoryData = complaintCategories[mainCategory];\n        const subcategoryData = categoryData.subcategories[subCategory];\n\n        // Create the problem and solution message\n        const problemSolutionContent = `\n**Problem:** ${subcategoryData.problem}\n\n**Solution:**\n${subcategoryData.solution.map(step => `â€¢ ${step}`).join('\\n')}\n\nIf the provided solution does not work, you can click \"Open Ticket\" to get help from our support team.`;\n\n        // Add bot response with problem and solution\n        const botResponse = {\n          type: 'bot',\n          content: problemSolutionContent,\n          timestamp: new Date(),\n          category: mainCategory,\n          subcategory: subCategory,\n          problem: subcategoryData.problem,\n          solution: subcategoryData.solution,\n          options: [{\n            id: 'open_ticket',\n            text: 'Open Ticket'\n          }, {\n            id: 'solved',\n            text: 'Issue Solved'\n          }]\n        };\n        setMessages(prev => [...prev, botResponse]);\n\n        // If it's a serious issue, create a ticket automatically\n        if (['technical.crash', 'billing.duplicate_charges', 'service.unavailable'].includes(`${mainCategory}.${subCategory}`)) {\n          // Create ticket with AI-determined category and priority\n          const ticketResult = await createTicket(subcategoryData.name, category, priority);\n          if (ticketResult && ticketResult.success) {\n            // Add ticket creation confirmation\n            const ticketMessage = {\n              type: 'bot',\n              content: `I've automatically created a ticket for this issue. Category: ${categoryData.name}, Subcategory: ${subcategoryData.name}, Priority: ${priority}`,\n              timestamp: new Date(),\n              ticketCreated: true,\n              ticketId: ticketResult.ticketId\n            };\n            setMessages(prev => [...prev, ticketMessage]);\n            toast.success(`Ticket #${ticketResult.ticketId} has been created for your complaint.`);\n          }\n        }\n      }\n\n      // Handle special options\n      if (optionId === 'open_ticket') {\n        // Show ticket form\n        const ticketFormMessage = {\n          type: 'bot',\n          content: 'Please provide additional details about your issue:',\n          timestamp: new Date(),\n          isTicketForm: true\n        };\n        setMessages(prev => [...prev, ticketFormMessage]);\n      } else if (optionId === 'solved') {\n        // Thank the user\n        const thankYouMessage = {\n          type: 'bot',\n          content: 'Great! I\\'m glad the solution helped. Is there anything else I can assist you with?',\n          timestamp: new Date(),\n          options: [{\n            id: 'billing',\n            text: 'Billing Issue'\n          }, {\n            id: 'technical',\n            text: 'Technical Problem'\n          }, {\n            id: 'service',\n            text: 'Service Complaint'\n          }, {\n            id: 'feedback',\n            text: 'General Feedback'\n          }, {\n            id: 'inquiry',\n            text: 'Account Inquiry'\n          }, {\n            id: 'other',\n            text: 'Other Issue'\n          }]\n        };\n        setMessages(prev => [...prev, thankYouMessage]);\n      }\n    } catch (error) {\n      console.error('Error processing option:', error);\n\n      // Add error message to chat\n      const errorMessage = {\n        type: 'bot',\n        content: 'Sorry, I encountered an error processing your selection. Please try again or type your issue directly.',\n        timestamp: new Date(),\n        isError: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Legacy handleOptionSelect for backward compatibility\n  const handleLegacyOptionSelect = async (optionId, optionText) => {\n    // Add user message showing their selection\n    const userMessage = {\n      type: 'user',\n      content: `I need help with: ${optionText}`,\n      timestamp: new Date(),\n      isOption: true\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    try {\n      // Process the selected option\n      const category = optionId; // Use the option ID as the category\n      const priority = optionId === 'technical' || optionId === 'service' ? 'high' : 'medium';\n\n      // Add bot response based on the selected option\n      let responseContent = '';\n      switch (optionId) {\n        case 'billing':\n          responseContent = 'I understand you\\'re having a billing issue. Could you please provide more details about the problem?';\n          break;\n        case 'technical':\n          responseContent = 'I see you\\'re experiencing a technical problem. Could you describe the issue you\\'re facing in detail?';\n          break;\n        case 'service':\n          responseContent = 'I\\'m sorry to hear you have a service complaint. Please tell me more about the service issue you encountered.';\n          break;\n        case 'feedback':\n          responseContent = 'Thank you for wanting to provide feedback. I\\'d love to hear your thoughts on our service.';\n          break;\n        case 'inquiry':\n          responseContent = 'I\\'d be happy to help with your account inquiry. What specific information are you looking for?';\n          break;\n        case 'other':\n          responseContent = 'I understand you have another type of issue. Please describe your concern, and I\\'ll do my best to assist you.';\n          break;\n        default:\n          responseContent = 'Thank you for selecting an option. How can I assist you further with this?';\n      }\n      const botResponse = {\n        type: 'bot',\n        content: responseContent,\n        timestamp: new Date(),\n        category: category\n      };\n      setMessages(prev => [...prev, botResponse]);\n\n      // Create a ticket if it's a complaint category\n      if (['billing', 'technical', 'service'].includes(optionId)) {\n        // Create ticket with AI-determined category and priority\n        const ticketResult = await createTicket(optionText, category, priority);\n        if (ticketResult && ticketResult.success) {\n          // Add ticket creation confirmation\n          const ticketMessage = {\n            type: 'bot',\n            content: `I've created a ticket for your ${optionText.toLowerCase()}. Category: ${category}, Priority: ${priority}`,\n            timestamp: new Date(),\n            ticketCreated: true,\n            ticketId: ticketResult.ticketId\n          };\n          setMessages(prev => [...prev, ticketMessage]);\n          toast.success(`Ticket #${ticketResult.ticketId} has been created for your complaint.`);\n        }\n      }\n    } catch (error) {\n      console.error('Error processing option:', error);\n\n      // Add error message to chat\n      const errorMessage = {\n        type: 'bot',\n        content: 'Sorry, I encountered an error processing your selection. Please try again or type your issue directly.',\n        timestamp: new Date(),\n        isError: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!input.trim() && !isVoiceInputActive && !isImageUploadActive) return;\n\n    // Add user message to chat\n    const userMessage = {\n      type: 'user',\n      content: input,\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput('');\n    setIsLoading(true);\n    try {\n      // Send message to backend\n      const response = await axios.post('/api/chatbot/message', {\n        message: input,\n        messageType: 'text'\n      });\n\n      // Process with AI features\n      const category = categorizeComplaint(input);\n      const priority = determinePriority(input);\n\n      // Add initial bot response to chat\n      const initialResponse = {\n        type: 'bot',\n        content: response.data.message,\n        timestamp: new Date(),\n        suggestTicket: response.data.suggestTicket || false\n      };\n      setMessages(prev => [...prev, initialResponse]);\n\n      // If the message suggests creating a ticket, show AI features\n      if (response.data.suggestTicket || input.toLowerCase().includes('complaint') || input.toLowerCase().includes('issue') || input.toLowerCase().includes('problem')) {\n        // Add AI features message\n        const aiFeatureMessage = {\n          type: 'bot',\n          content: 'I can help you with your complaint using these AI features:',\n          timestamp: new Date(),\n          aiFeatures: [{\n            title: 'Automatic Ticket Creation',\n            description: 'Upon registering a complaint, the system automatically generates a ticket with all relevant details.'\n          }, {\n            title: 'Intelligent Categorization',\n            description: 'AI will categorize tickets based on predefined categories (e.g., billing, technical, service) using machine learning models.'\n          }, {\n            title: 'Prioritization System',\n            description: 'AI will assign priority levels (urgent, high, medium, low) based on the complaint\\'s nature and keywords.'\n          }, {\n            title: 'Dynamic Assignment',\n            description: 'The system will use AI to intelligently assign tickets to the relevant teams or agents based on expertise, workload, and availability.'\n          }]\n        };\n        setMessages(prev => [...prev, aiFeatureMessage]);\n\n        // Create ticket with AI-determined category and priority\n        const ticketResult = await createTicket(input, category, priority);\n        if (ticketResult.success) {\n          // Add ticket creation confirmation\n          const ticketMessage = {\n            type: 'bot',\n            content: `I've analyzed your complaint and created a ticket for you. Category: ${category}, Priority: ${priority}`,\n            timestamp: new Date(),\n            ticketCreated: true,\n            ticketId: ticketResult.ticketId\n          };\n          setMessages(prev => [...prev, ticketMessage]);\n          toast.success(`Ticket #${ticketResult.ticketId} has been created for your complaint.`);\n        }\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n\n      // Add error message to chat\n      const errorMessage = {\n        type: 'bot',\n        content: 'Sorry, I encountered an error processing your request. Please try again later.',\n        timestamp: new Date(),\n        isError: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n      toast.error('Failed to process your message. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleVoiceInput = transcript => {\n    // Add user voice message to chat\n    const userMessage = {\n      type: 'user',\n      content: transcript,\n      timestamp: new Date(),\n      isVoice: true\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    setIsVoiceInputActive(false);\n\n    // Process voice input\n    processMessage(transcript, 'voice');\n  };\n  const handleImageUpload = async imageFile => {\n    // Add user image message to chat\n    const userMessage = {\n      type: 'user',\n      content: 'Image uploaded',\n      timestamp: new Date(),\n      isImage: true,\n      imageUrl: URL.createObjectURL(imageFile)\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    setIsImageUploadActive(false);\n    try {\n      // Create form data for image upload\n      const formData = new FormData();\n      formData.append('image', imageFile);\n\n      // Send image to backend for processing\n      const response = await axios.post('/api/chatbot/image', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n\n      // Add bot response to chat\n      const botResponse = {\n        type: 'bot',\n        content: response.data.message,\n        timestamp: new Date(),\n        detectedObjects: response.data.detectedObjects,\n        ticketCreated: response.data.ticketCreated,\n        ticketId: response.data.ticketId\n      };\n      setMessages(prev => [...prev, botResponse]);\n\n      // Show toast if ticket was created\n      if (response.data.ticketCreated) {\n        toast.success(`Ticket #${response.data.ticketId} has been created for your complaint.`);\n      }\n    } catch (error) {\n      console.error('Error processing image:', error);\n\n      // Add error message to chat\n      const errorMessage = {\n        type: 'bot',\n        content: 'Sorry, I encountered an error processing your image. Please try again later.',\n        timestamp: new Date(),\n        isError: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n      toast.error('Failed to process your image. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const processMessage = async (message, type) => {\n    try {\n      // Send message to backend\n      const response = await axios.post('/api/chatbot/message', {\n        message,\n        messageType: type\n      });\n\n      // Add bot response to chat\n      const botResponse = {\n        type: 'bot',\n        content: response.data.message,\n        timestamp: new Date(),\n        ticketCreated: response.data.ticketCreated,\n        ticketId: response.data.ticketId\n      };\n      setMessages(prev => [...prev, botResponse]);\n\n      // Show toast if ticket was created\n      if (response.data.ticketCreated) {\n        toast.success(`Ticket #${response.data.ticketId} has been created for your complaint.`);\n      }\n    } catch (error) {\n      console.error('Error processing message:', error);\n\n      // Add error message to chat\n      const errorMessage = {\n        type: 'bot',\n        content: 'Sorry, I encountered an error processing your request. Please try again later.',\n        timestamp: new Date(),\n        isError: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n      toast.error('Failed to process your message. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const toggleVoiceInput = () => {\n    setIsVoiceInputActive(!isVoiceInputActive);\n    setIsImageUploadActive(false);\n  };\n  const toggleImageUpload = () => {\n    setIsImageUploadActive(!isImageUploadActive);\n    setIsVoiceInputActive(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white rounded-lg shadow-xl w-full max-w-md h-[500px] flex flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-primary-600 text-white px-4 py-3 rounded-t-lg flex justify-between items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          className: \"h-6 w-6 mr-2\",\n          fill: \"none\",\n          viewBox: \"0 0 24 24\",\n          stroke: \"currentColor\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\",\n            strokeWidth: 2,\n            d: \"M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 708,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 707,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"font-semibold\",\n          children: \"AI Assistant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 706,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        className: \"text-white hover:text-gray-200 focus:outline-none\",\n        \"aria-label\": \"Close chatbot\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          className: \"h-5 w-5\",\n          viewBox: \"0 0 20 20\",\n          fill: \"currentColor\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            fillRule: \"evenodd\",\n            d: \"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\",\n            clipRule: \"evenodd\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 718,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 717,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 712,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 705,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 p-4 overflow-y-auto\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n        message: message,\n        onOptionSelect: handleOptionSelect\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 726,\n        columnNumber: 11\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center mt-2\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-gray-200 rounded-full p-2 max-w-[80%]\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex space-x-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-2 h-2 bg-gray-500 rounded-full animate-bounce\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 736,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-2 h-2 bg-gray-500 rounded-full animate-bounce\",\n              style: {\n                animationDelay: '0.2s'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 737,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-2 h-2 bg-gray-500 rounded-full animate-bounce\",\n              style: {\n                animationDelay: '0.4s'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 738,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 735,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 734,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 733,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 724,\n      columnNumber: 7\n    }, this), isVoiceInputActive && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"px-4 py-2 bg-gray-50 border-t border-gray-200\",\n      children: /*#__PURE__*/_jsxDEV(VoiceInput, {\n        onTranscript: handleVoiceInput,\n        onCancel: () => setIsVoiceInputActive(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 749,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 748,\n      columnNumber: 9\n    }, this), isImageUploadActive && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"px-4 py-2 bg-gray-50 border-t border-gray-200\",\n      children: /*#__PURE__*/_jsxDEV(ImageUpload, {\n        onImageUpload: handleImageUpload,\n        onCancel: () => setIsImageUploadActive(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 756,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 755,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"p-4 border-t border-gray-200 flex items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: toggleVoiceInput,\n        className: `p-2 rounded-full mr-2 focus:outline-none ${isVoiceInputActive ? 'bg-red-100 text-red-600' : 'text-gray-500 hover:text-primary-600'}`,\n        \"aria-label\": \"Voice input\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          className: \"h-5 w-5\",\n          fill: \"none\",\n          viewBox: \"0 0 24 24\",\n          stroke: \"currentColor\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\",\n            strokeWidth: 2,\n            d: \"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 769,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 768,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 762,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: toggleImageUpload,\n        className: `p-2 rounded-full mr-2 focus:outline-none ${isImageUploadActive ? 'bg-blue-100 text-blue-600' : 'text-gray-500 hover:text-primary-600'}`,\n        \"aria-label\": \"Image upload\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          className: \"h-5 w-5\",\n          fill: \"none\",\n          viewBox: \"0 0 24 24\",\n          stroke: \"currentColor\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\",\n            strokeWidth: 2,\n            d: \"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 779,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 772,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: handleInputChange,\n        placeholder: \"Type your message...\",\n        className: \"flex-1 border border-gray-300 rounded-full px-4 py-2 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent\",\n        disabled: isLoading || isVoiceInputActive || isImageUploadActive,\n        ref: inputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 782,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"ml-2 bg-primary-600 text-white rounded-full p-2 hover:bg-primary-700 focus:outline-none disabled:opacity-50\",\n        disabled: !input.trim() || isLoading || isVoiceInputActive || isImageUploadActive,\n        \"aria-label\": \"Send message\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          className: \"h-5 w-5\",\n          viewBox: \"0 0 20 20\",\n          fill: \"currentColor\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            fillRule: \"evenodd\",\n            d: \"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 0l-3 3a1 1 0 001.414 1.414L9 9.414V13a1 1 0 102 0V9.414l1.293 1.293a1 1 0 001.414-1.414z\",\n            clipRule: \"evenodd\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 798,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 797,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 791,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 761,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 703,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"yscUgk4URqMsGd3JRBTowfWeW0w=\", false, function () {\n  return [useAI];\n});\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","toast","ChatMessage","VoiceInput","ImageUpload","useAI","jsxDEV","_jsxDEV","Chatbot","onClose","_s","messages","setMessages","type","content","timestamp","Date","options","input","setInput","isLoading","setIsLoading","isVoiceInputActive","setIsVoiceInputActive","isImageUploadActive","setIsImageUploadActive","showAIFeatures","setShowAIFeatures","loading","setLoading","complaintCategories","setComplaintCategories","name","subcategories","problem","solution","prev","updatedMessages","length","Object","entries","map","id","category","text","fetchCategories","response","get","data","error","console","isProcessing","createTicket","categorizeComplaint","determinePriority","determineAssignment","messagesEndRef","inputRef","scrollToBottom","current","focus","_messagesEndRef$curre","scrollIntoView","behavior","handleInputChange","e","target","value","handleOptionSelect","optionId","optionText","userMessage","isOption","isMainCategory","keys","includes","mainCategory","subCategory","split","priority","categoryData","subcategoryOptions","botResponse","subcategoryData","problemSolutionContent","step","join","subcategory","ticketResult","success","ticketMessage","ticketCreated","ticketId","ticketFormMessage","isTicketForm","thankYouMessage","errorMessage","isError","handleLegacyOptionSelect","responseContent","toLowerCase","handleSubmit","preventDefault","trim","post","message","messageType","initialResponse","suggestTicket","aiFeatureMessage","aiFeatures","title","description","handleVoiceInput","transcript","isVoice","processMessage","handleImageUpload","imageFile","isImage","imageUrl","URL","createObjectURL","formData","FormData","append","headers","detectedObjects","toggleVoiceInput","toggleImageUpload","className","children","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","fileName","_jsxFileName","lineNumber","columnNumber","onClick","fillRule","clipRule","index","onOptionSelect","style","animationDelay","ref","onTranscript","onCancel","onImageUpload","onSubmit","onChange","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/thava/OneDrive/Desktop/New folder/Complaint-Management-System/frontend/src/components/chatbot/Chatbot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport axios from '../../services/axios';\r\nimport { toast } from 'react-toastify';\r\nimport ChatMessage from './ChatMessage';\r\nimport VoiceInput from './VoiceInput';\r\nimport ImageUpload from './ImageUpload';\r\nimport { useAI } from '../hooks/useAI';\r\n\r\nconst Chatbot = ({ onClose }) => {\r\n  // Initialize with default welcome message\r\n  const [messages, setMessages] = useState([{\r\n    type: 'bot',\r\n    content: 'Hello! I\\'m your AI assistant. How can I help you today? You can type your complaint, use voice input, or upload an image of the issue.',\r\n    timestamp: new Date(),\r\n    options: []\r\n  }]);\r\n  \r\n  // Input state and refs\r\n  const [input, setInput] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isVoiceInputActive, setIsVoiceInputActive] = useState(false);\r\n  const [isImageUploadActive, setIsImageUploadActive] = useState(false);\r\n  const [showAIFeatures, setShowAIFeatures] = useState(false);\r\n  \r\n  // Initialize complaint categories state\r\n  const [loading, setLoading] = useState(false);\r\n  const [complaintCategories, setComplaintCategories] = useState({\r\n    'billing': {\r\n      name: 'Billing Issue',\r\n      subcategories: {\r\n        'overcharged': {\r\n          name: 'Overcharged',\r\n          problem: 'Charged more than expected.',\r\n          solution: [\r\n            'Check your subscription details.',\r\n            'Verify payment method charges.',\r\n            'Contact billing support with invoice ID.'\r\n          ]\r\n        },\r\n        'duplicate_charges': {\r\n          name: 'Duplicate Charges',\r\n          problem: 'Charged multiple times for same service.',\r\n          solution: [\r\n            'Check bank statement for duplicate entries.',\r\n            'Note transaction IDs.',\r\n            'Contact billing with transaction details.'\r\n          ]\r\n        },\r\n        'wrong_plan': {\r\n          name: 'Wrong Plan Charged',\r\n          problem: 'Billed for the wrong plan.',\r\n          solution: [\r\n            'Go to Subscription settings.',\r\n            'Validate the plan selected.',\r\n            'Raise a support request if incorrect.'\r\n          ]\r\n        }\r\n      }\r\n    },\r\n    'technical': {\r\n      name: 'Technical Problem',\r\n      subcategories: {\r\n        'app_crash': {\r\n          name: 'App Crash / Freeze',\r\n          problem: 'App crashes or freezes on startup.',\r\n          solution: [\r\n            'Restart the app.',\r\n            'Clear app cache and try again.',\r\n            'Reinstall if issue persists.'\r\n          ]\r\n        },\r\n        'feature_not_working': {\r\n          name: 'Feature Not Working',\r\n          problem: 'Certain functionality is not responding.',\r\n          solution: [\r\n            'Log out and log back in.',\r\n            'Ensure the latest update is installed.',\r\n            'Restart device.'\r\n          ]\r\n        },\r\n        'slow_performance': {\r\n          name: 'Slow Performance',\r\n          problem: 'App is very slow to respond.',\r\n          solution: [\r\n            'Clear cache and background apps.',\r\n            'Ensure internet connection is stable.'\r\n          ]\r\n        }\r\n      }\r\n    },\r\n    'service': {\r\n      name: 'Service Complaint',\r\n      subcategories: {\r\n        'unavailable_service': {\r\n          name: 'Unavailable Service',\r\n          problem: 'Service not available in region.',\r\n          solution: [\r\n            'Check service availability page.',\r\n            'Contact support for region rollout info.'\r\n          ]\r\n        },\r\n        'poor_quality': {\r\n          name: 'Poor Service Quality',\r\n          problem: 'Service is not up to mark.',\r\n          solution: [\r\n            'Share feedback via in-app feedback form.',\r\n            'Wait for service team response.'\r\n          ]\r\n        },\r\n        'delay': {\r\n          name: 'Delay in Service',\r\n          problem: 'Delayed support or processing.',\r\n          solution: [\r\n            'Check SLA mentioned in your plan.',\r\n            'If overdue, contact customer care.'\r\n          ]\r\n        }\r\n      }\r\n    },\r\n    'feedback': {\r\n      name: 'General Feedback',\r\n      subcategories: {\r\n        'suggestion': {\r\n          name: 'Suggestion',\r\n          problem: 'User wants to share ideas.',\r\n          solution: [\r\n            'Fill out suggestion form.',\r\n            'Await response from innovation team.'\r\n          ]\r\n        },\r\n        'complaint': {\r\n          name: 'Complaint',\r\n          problem: 'General dissatisfaction.',\r\n          solution: [\r\n            'Submit feedback through chatbot.',\r\n            'Escalation possible through \"Open Ticket\".'\r\n          ]\r\n        },\r\n        'appreciation': {\r\n          name: 'Appreciation',\r\n          problem: 'Positive feedback.',\r\n          solution: [\r\n            'Thank you! Your message is shared with the team.'\r\n          ]\r\n        }\r\n      }\r\n    },\r\n    'account': {\r\n      name: 'Account Inquiry',\r\n      subcategories: {\r\n        'login_issue': {\r\n          name: 'Login Issue',\r\n          problem: 'Cannot log in.',\r\n          solution: [\r\n            'Use \"Forgot Password\".',\r\n            'Try social login if applicable.'\r\n          ]\r\n        },\r\n        'profile_update': {\r\n          name: 'Profile Update',\r\n          problem: 'Unable to update details.',\r\n          solution: [\r\n            'Go to profile settings > Edit.',\r\n            'Ensure all required fields are filled.'\r\n          ]\r\n        },\r\n        'account_deactivation': {\r\n          name: 'Account Deactivation',\r\n          problem: 'Want to close account.',\r\n          solution: [\r\n            'Visit Account Settings > Deactivate Account.'\r\n          ]\r\n        }\r\n      }\r\n    },\r\n    'other': {\r\n      name: 'Other Issue',\r\n      subcategories: {\r\n        'not_listed': {\r\n          name: 'Not Listed Above',\r\n          problem: 'Unique issue not covered.',\r\n          solution: [\r\n            'Click \"Open Ticket\".',\r\n            'Fill in issue description.',\r\n            'Wait for ticket assignment.'\r\n          ]\r\n        }\r\n      }\r\n    }\r\n  });\r\n  \r\n  // Update initial message with categories from state\r\n  useEffect(() => {\r\n    // Update initial message with categories\r\n    setMessages(prev => {\r\n      const updatedMessages = [...prev];\r\n      if (updatedMessages.length > 0) {\r\n        updatedMessages[0] = {\r\n          ...updatedMessages[0],\r\n          options: Object.entries(complaintCategories).map(([id, category]) => ({\r\n            id: id,\r\n            text: category.name\r\n          }))\r\n        };\r\n      }\r\n      return updatedMessages;\r\n    });\r\n  }, [complaintCategories]);\r\n  \r\n  // Fetch categories from API\r\n  useEffect(() => {\r\n    const fetchCategories = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await axios.get('/api/categories');\r\n        setComplaintCategories(response.data);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching categories:', error);\r\n        toast.error('Failed to load categories. Using default categories.');\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchCategories();\r\n  }, []);\r\n  \r\n  // Use the AI hook for ticket processing\r\n  const { isProcessing, createTicket, categorizeComplaint, determinePriority, determineAssignment } = useAI();\r\n  \r\n  const messagesEndRef = useRef(null);\r\n  const inputRef = useRef(null);\r\n\r\n  // Scroll to bottom of messages\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  // Focus input field when component mounts\r\n  useEffect(() => {\r\n    if (inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, []);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n  \r\n  // Handle option selection from the chatbot options\r\n  const handleOptionSelect = async (optionId, optionText) => {\r\n    // Add user message showing their selection\r\n    const userMessage = {\r\n      type: 'user',\r\n      content: `I need help with: ${optionText}`,\r\n      timestamp: new Date(),\r\n      isOption: true\r\n    };\r\n    \r\n    setMessages(prev => [...prev, userMessage]);\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      // Check if this is a main category or subcategory\r\n      const isMainCategory = Object.keys(complaintCategories).includes(optionId);\r\n      const [mainCategory, subCategory] = isMainCategory ? [optionId, null] : optionId.split('.');\r\n      \r\n      // Process the selected option\r\n      const category = mainCategory; // Use the main category ID\r\n      const priority = category === 'technical' || category === 'service' ? 'high' : 'medium';\r\n      \r\n      // If this is a main category, show subcategories\r\n      if (isMainCategory) {\r\n        const categoryData = complaintCategories[mainCategory];\r\n        const subcategories = categoryData.subcategories;\r\n        \r\n        // Create options for subcategories\r\n        const subcategoryOptions = Object.entries(subcategories).map(([id, data]) => ({\r\n          id: `${mainCategory}.${id}`,\r\n          text: data.name\r\n        }));\r\n        \r\n        // Add bot response with subcategories\r\n        const botResponse = {\r\n          type: 'bot',\r\n          content: `Please select a specific issue related to ${categoryData.name}:`,\r\n          timestamp: new Date(),\r\n          options: subcategoryOptions,\r\n          category: mainCategory\r\n        };\r\n        \r\n        setMessages(prev => [...prev, botResponse]);\r\n      } else {\r\n        // This is a subcategory selection\r\n        const categoryData = complaintCategories[mainCategory];\r\n        const subcategoryData = categoryData.subcategories[subCategory];\r\n        \r\n        // Create the problem and solution message\r\n        const problemSolutionContent = `\r\n**Problem:** ${subcategoryData.problem}\r\n\r\n**Solution:**\r\n${subcategoryData.solution.map(step => `â€¢ ${step}`).join('\\n')}\r\n\r\nIf the provided solution does not work, you can click \"Open Ticket\" to get help from our support team.`;\r\n        \r\n        // Add bot response with problem and solution\r\n        const botResponse = {\r\n          type: 'bot',\r\n          content: problemSolutionContent,\r\n          timestamp: new Date(),\r\n          category: mainCategory,\r\n          subcategory: subCategory,\r\n          problem: subcategoryData.problem,\r\n          solution: subcategoryData.solution,\r\n          options: [\r\n            { id: 'open_ticket', text: 'Open Ticket' },\r\n            { id: 'solved', text: 'Issue Solved' }\r\n          ]\r\n        };\r\n        \r\n        setMessages(prev => [...prev, botResponse]);\r\n        \r\n        // If it's a serious issue, create a ticket automatically\r\n        if (['technical.crash', 'billing.duplicate_charges', 'service.unavailable'].includes(`${mainCategory}.${subCategory}`)) {\r\n          // Create ticket with AI-determined category and priority\r\n          const ticketResult = await createTicket(subcategoryData.name, category, priority);\r\n          \r\n          if (ticketResult && ticketResult.success) {\r\n            // Add ticket creation confirmation\r\n            const ticketMessage = {\r\n              type: 'bot',\r\n              content: `I've automatically created a ticket for this issue. Category: ${categoryData.name}, Subcategory: ${subcategoryData.name}, Priority: ${priority}`,\r\n              timestamp: new Date(),\r\n              ticketCreated: true,\r\n              ticketId: ticketResult.ticketId\r\n            };\r\n            \r\n            setMessages(prev => [...prev, ticketMessage]);\r\n            toast.success(`Ticket #${ticketResult.ticketId} has been created for your complaint.`);\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Handle special options\r\n      if (optionId === 'open_ticket') {\r\n        // Show ticket form\r\n        const ticketFormMessage = {\r\n          type: 'bot',\r\n          content: 'Please provide additional details about your issue:',\r\n          timestamp: new Date(),\r\n          isTicketForm: true\r\n        };\r\n        \r\n        setMessages(prev => [...prev, ticketFormMessage]);\r\n      } else if (optionId === 'solved') {\r\n        // Thank the user\r\n        const thankYouMessage = {\r\n          type: 'bot',\r\n          content: 'Great! I\\'m glad the solution helped. Is there anything else I can assist you with?',\r\n          timestamp: new Date(),\r\n          options: [\r\n            { id: 'billing', text: 'Billing Issue' },\r\n            { id: 'technical', text: 'Technical Problem' },\r\n            { id: 'service', text: 'Service Complaint' },\r\n            { id: 'feedback', text: 'General Feedback' },\r\n            { id: 'inquiry', text: 'Account Inquiry' },\r\n            { id: 'other', text: 'Other Issue' }\r\n          ]\r\n        };\r\n        \r\n        setMessages(prev => [...prev, thankYouMessage]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error processing option:', error);\r\n      \r\n      // Add error message to chat\r\n      const errorMessage = {\r\n        type: 'bot',\r\n        content: 'Sorry, I encountered an error processing your selection. Please try again or type your issue directly.',\r\n        timestamp: new Date(),\r\n        isError: true\r\n      };\r\n      \r\n      setMessages(prev => [...prev, errorMessage]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Legacy handleOptionSelect for backward compatibility\r\n  const handleLegacyOptionSelect = async (optionId, optionText) => {\r\n    // Add user message showing their selection\r\n    const userMessage = {\r\n      type: 'user',\r\n      content: `I need help with: ${optionText}`,\r\n      timestamp: new Date(),\r\n      isOption: true\r\n    };\r\n    \r\n    setMessages(prev => [...prev, userMessage]);\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      // Process the selected option\r\n      const category = optionId; // Use the option ID as the category\r\n      const priority = optionId === 'technical' || optionId === 'service' ? 'high' : 'medium';\r\n      \r\n      // Add bot response based on the selected option\r\n      let responseContent = '';\r\n      \r\n      switch(optionId) {\r\n        case 'billing':\r\n          responseContent = 'I understand you\\'re having a billing issue. Could you please provide more details about the problem?';\r\n          break;\r\n        case 'technical':\r\n          responseContent = 'I see you\\'re experiencing a technical problem. Could you describe the issue you\\'re facing in detail?';\r\n          break;\r\n        case 'service':\r\n          responseContent = 'I\\'m sorry to hear you have a service complaint. Please tell me more about the service issue you encountered.';\r\n          break;\r\n        case 'feedback':\r\n          responseContent = 'Thank you for wanting to provide feedback. I\\'d love to hear your thoughts on our service.';\r\n          break;\r\n        case 'inquiry':\r\n          responseContent = 'I\\'d be happy to help with your account inquiry. What specific information are you looking for?';\r\n          break;\r\n        case 'other':\r\n          responseContent = 'I understand you have another type of issue. Please describe your concern, and I\\'ll do my best to assist you.';\r\n          break;\r\n        default:\r\n          responseContent = 'Thank you for selecting an option. How can I assist you further with this?';\r\n      }\r\n      \r\n      const botResponse = {\r\n        type: 'bot',\r\n        content: responseContent,\r\n        timestamp: new Date(),\r\n        category: category\r\n      };\r\n      \r\n      setMessages(prev => [...prev, botResponse]);\r\n      \r\n      // Create a ticket if it's a complaint category\r\n      if (['billing', 'technical', 'service'].includes(optionId)) {\r\n        // Create ticket with AI-determined category and priority\r\n        const ticketResult = await createTicket(optionText, category, priority);\r\n        \r\n        if (ticketResult && ticketResult.success) {\r\n          // Add ticket creation confirmation\r\n          const ticketMessage = {\r\n            type: 'bot',\r\n            content: `I've created a ticket for your ${optionText.toLowerCase()}. Category: ${category}, Priority: ${priority}`,\r\n            timestamp: new Date(),\r\n            ticketCreated: true,\r\n            ticketId: ticketResult.ticketId\r\n          };\r\n          \r\n          setMessages(prev => [...prev, ticketMessage]);\r\n          toast.success(`Ticket #${ticketResult.ticketId} has been created for your complaint.`);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error processing option:', error);\r\n      \r\n      // Add error message to chat\r\n      const errorMessage = {\r\n        type: 'bot',\r\n        content: 'Sorry, I encountered an error processing your selection. Please try again or type your issue directly.',\r\n        timestamp: new Date(),\r\n        isError: true\r\n      };\r\n      \r\n      setMessages(prev => [...prev, errorMessage]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!input.trim() && !isVoiceInputActive && !isImageUploadActive) return;\r\n\r\n    // Add user message to chat\r\n    const userMessage = {\r\n      type: 'user',\r\n      content: input,\r\n      timestamp: new Date()\r\n    };\r\n    \r\n    setMessages(prev => [...prev, userMessage]);\r\n    setInput('');\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      // Send message to backend\r\n      const response = await axios.post('/api/chatbot/message', {\r\n        message: input,\r\n        messageType: 'text'\r\n      });\r\n\r\n      // Process with AI features\r\n      const category = categorizeComplaint(input);\r\n      const priority = determinePriority(input);\r\n      \r\n      // Add initial bot response to chat\r\n      const initialResponse = {\r\n        type: 'bot',\r\n        content: response.data.message,\r\n        timestamp: new Date(),\r\n        suggestTicket: response.data.suggestTicket || false\r\n      };\r\n      \r\n      setMessages(prev => [...prev, initialResponse]);\r\n      \r\n      // If the message suggests creating a ticket, show AI features\r\n      if (response.data.suggestTicket || input.toLowerCase().includes('complaint') || \r\n          input.toLowerCase().includes('issue') || input.toLowerCase().includes('problem')) {\r\n        \r\n        // Add AI features message\r\n        const aiFeatureMessage = {\r\n          type: 'bot',\r\n          content: 'I can help you with your complaint using these AI features:',\r\n          timestamp: new Date(),\r\n          aiFeatures: [\r\n            { title: 'Automatic Ticket Creation', description: 'Upon registering a complaint, the system automatically generates a ticket with all relevant details.' },\r\n            { title: 'Intelligent Categorization', description: 'AI will categorize tickets based on predefined categories (e.g., billing, technical, service) using machine learning models.' },\r\n            { title: 'Prioritization System', description: 'AI will assign priority levels (urgent, high, medium, low) based on the complaint\\'s nature and keywords.' },\r\n            { title: 'Dynamic Assignment', description: 'The system will use AI to intelligently assign tickets to the relevant teams or agents based on expertise, workload, and availability.' }\r\n          ]\r\n        };\r\n        \r\n        setMessages(prev => [...prev, aiFeatureMessage]);\r\n        \r\n        // Create ticket with AI-determined category and priority\r\n        const ticketResult = await createTicket(input, category, priority);\r\n        \r\n        if (ticketResult.success) {\r\n          // Add ticket creation confirmation\r\n          const ticketMessage = {\r\n            type: 'bot',\r\n            content: `I've analyzed your complaint and created a ticket for you. Category: ${category}, Priority: ${priority}`,\r\n            timestamp: new Date(),\r\n            ticketCreated: true,\r\n            ticketId: ticketResult.ticketId\r\n          };\r\n          \r\n          setMessages(prev => [...prev, ticketMessage]);\r\n          toast.success(`Ticket #${ticketResult.ticketId} has been created for your complaint.`);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      \r\n      // Add error message to chat\r\n      const errorMessage = {\r\n        type: 'bot',\r\n        content: 'Sorry, I encountered an error processing your request. Please try again later.',\r\n        timestamp: new Date(),\r\n        isError: true\r\n      };\r\n      \r\n      setMessages(prev => [...prev, errorMessage]);\r\n      toast.error('Failed to process your message. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleVoiceInput = (transcript) => {\r\n    // Add user voice message to chat\r\n    const userMessage = {\r\n      type: 'user',\r\n      content: transcript,\r\n      timestamp: new Date(),\r\n      isVoice: true\r\n    };\r\n    \r\n    setMessages(prev => [...prev, userMessage]);\r\n    setIsLoading(true);\r\n    setIsVoiceInputActive(false);\r\n\r\n    // Process voice input\r\n    processMessage(transcript, 'voice');\r\n  };\r\n\r\n  const handleImageUpload = async (imageFile) => {\r\n    // Add user image message to chat\r\n    const userMessage = {\r\n      type: 'user',\r\n      content: 'Image uploaded',\r\n      timestamp: new Date(),\r\n      isImage: true,\r\n      imageUrl: URL.createObjectURL(imageFile)\r\n    };\r\n    \r\n    setMessages(prev => [...prev, userMessage]);\r\n    setIsLoading(true);\r\n    setIsImageUploadActive(false);\r\n\r\n    try {\r\n      // Create form data for image upload\r\n      const formData = new FormData();\r\n      formData.append('image', imageFile);\r\n\r\n      // Send image to backend for processing\r\n      const response = await axios.post('/api/chatbot/image', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      });\r\n\r\n      // Add bot response to chat\r\n      const botResponse = {\r\n        type: 'bot',\r\n        content: response.data.message,\r\n        timestamp: new Date(),\r\n        detectedObjects: response.data.detectedObjects,\r\n        ticketCreated: response.data.ticketCreated,\r\n        ticketId: response.data.ticketId\r\n      };\r\n\r\n      setMessages(prev => [...prev, botResponse]);\r\n\r\n      // Show toast if ticket was created\r\n      if (response.data.ticketCreated) {\r\n        toast.success(`Ticket #${response.data.ticketId} has been created for your complaint.`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error processing image:', error);\r\n      \r\n      // Add error message to chat\r\n      const errorMessage = {\r\n        type: 'bot',\r\n        content: 'Sorry, I encountered an error processing your image. Please try again later.',\r\n        timestamp: new Date(),\r\n        isError: true\r\n      };\r\n      \r\n      setMessages(prev => [...prev, errorMessage]);\r\n      toast.error('Failed to process your image. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const processMessage = async (message, type) => {\r\n    try {\r\n      // Send message to backend\r\n      const response = await axios.post('/api/chatbot/message', {\r\n        message,\r\n        messageType: type\r\n      });\r\n\r\n      // Add bot response to chat\r\n      const botResponse = {\r\n        type: 'bot',\r\n        content: response.data.message,\r\n        timestamp: new Date(),\r\n        ticketCreated: response.data.ticketCreated,\r\n        ticketId: response.data.ticketId\r\n      };\r\n\r\n      setMessages(prev => [...prev, botResponse]);\r\n\r\n      // Show toast if ticket was created\r\n      if (response.data.ticketCreated) {\r\n        toast.success(`Ticket #${response.data.ticketId} has been created for your complaint.`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error processing message:', error);\r\n      \r\n      // Add error message to chat\r\n      const errorMessage = {\r\n        type: 'bot',\r\n        content: 'Sorry, I encountered an error processing your request. Please try again later.',\r\n        timestamp: new Date(),\r\n        isError: true\r\n      };\r\n      \r\n      setMessages(prev => [...prev, errorMessage]);\r\n      toast.error('Failed to process your message. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const toggleVoiceInput = () => {\r\n    setIsVoiceInputActive(!isVoiceInputActive);\r\n    setIsImageUploadActive(false);\r\n  };\r\n\r\n  const toggleImageUpload = () => {\r\n    setIsImageUploadActive(!isImageUploadActive);\r\n    setIsVoiceInputActive(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-xl w-full max-w-md h-[500px] flex flex-col\">\r\n      {/* Chatbot Header */}\r\n      <div className=\"bg-primary-600 text-white px-4 py-3 rounded-t-lg flex justify-between items-center\">\r\n        <div className=\"flex items-center\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z\" />\r\n          </svg>\r\n          <h3 className=\"font-semibold\">AI Assistant</h3>\r\n        </div>\r\n        <button \r\n          onClick={onClose}\r\n          className=\"text-white hover:text-gray-200 focus:outline-none\"\r\n          aria-label=\"Close chatbot\"\r\n        >\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n            <path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n          </svg>\r\n        </button>\r\n      </div>\r\n\r\n      {/* Messages Container */}\r\n      <div className=\"flex-1 p-4 overflow-y-auto\">\r\n        {messages.map((message, index) => (\r\n          <ChatMessage \r\n            key={index} \r\n            message={message} \r\n            onOptionSelect={handleOptionSelect}\r\n          />\r\n        ))}\r\n        {isLoading && (\r\n          <div className=\"flex items-center mt-2\">\r\n            <div className=\"bg-gray-200 rounded-full p-2 max-w-[80%]\">\r\n              <div className=\"flex space-x-2\">\r\n                <div className=\"w-2 h-2 bg-gray-500 rounded-full animate-bounce\"></div>\r\n                <div className=\"w-2 h-2 bg-gray-500 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\r\n                <div className=\"w-2 h-2 bg-gray-500 rounded-full animate-bounce\" style={{ animationDelay: '0.4s' }}></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      {/* Voice Input Component */}\r\n      {isVoiceInputActive && (\r\n        <div className=\"px-4 py-2 bg-gray-50 border-t border-gray-200\">\r\n          <VoiceInput onTranscript={handleVoiceInput} onCancel={() => setIsVoiceInputActive(false)} />\r\n        </div>\r\n      )}\r\n\r\n      {/* Image Upload Component */}\r\n      {isImageUploadActive && (\r\n        <div className=\"px-4 py-2 bg-gray-50 border-t border-gray-200\">\r\n          <ImageUpload onImageUpload={handleImageUpload} onCancel={() => setIsImageUploadActive(false)} />\r\n        </div>\r\n      )}\r\n\r\n      {/* Input Form */}\r\n      <form onSubmit={handleSubmit} className=\"p-4 border-t border-gray-200 flex items-center\">\r\n        <button \r\n          type=\"button\" \r\n          onClick={toggleVoiceInput}\r\n          className={`p-2 rounded-full mr-2 focus:outline-none ${isVoiceInputActive ? 'bg-red-100 text-red-600' : 'text-gray-500 hover:text-primary-600'}`}\r\n          aria-label=\"Voice input\"\r\n        >\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\" />\r\n          </svg>\r\n        </button>\r\n        <button \r\n          type=\"button\" \r\n          onClick={toggleImageUpload}\r\n          className={`p-2 rounded-full mr-2 focus:outline-none ${isImageUploadActive ? 'bg-blue-100 text-blue-600' : 'text-gray-500 hover:text-primary-600'}`}\r\n          aria-label=\"Image upload\"\r\n        >\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" />\r\n          </svg>\r\n        </button>\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Type your message...\"\r\n          className=\"flex-1 border border-gray-300 rounded-full px-4 py-2 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\r\n          disabled={isLoading || isVoiceInputActive || isImageUploadActive}\r\n          ref={inputRef}\r\n        />\r\n        <button \r\n          type=\"submit\" \r\n          className=\"ml-2 bg-primary-600 text-white rounded-full p-2 hover:bg-primary-700 focus:outline-none disabled:opacity-50\"\r\n          disabled={!input.trim() || isLoading || isVoiceInputActive || isImageUploadActive}\r\n          aria-label=\"Send message\"\r\n        >\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n            <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 0l-3 3a1 1 0 001.414 1.414L9 9.414V13a1 1 0 102 0V9.414l1.293 1.293a1 1 0 001.414-1.414z\" clipRule=\"evenodd\" />\r\n          </svg>\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,sBAAsB;AACxC,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,WAAW,MAAM,eAAe;AACvC,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAC/B;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,CAAC;IACxCgB,IAAI,EAAE,KAAK;IACXC,OAAO,EAAE,yIAAyI;IAClJC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;IACrBC,OAAO,EAAE;EACX,CAAC,CAAC,CAAC;;EAEH;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACuB,SAAS,EAAEC,YAAY,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACyB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAAC2B,mBAAmB,EAAEC,sBAAsB,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EACrE,MAAM,CAAC6B,cAAc,EAAEC,iBAAiB,CAAC,GAAG9B,QAAQ,CAAC,KAAK,CAAC;;EAE3D;EACA,MAAM,CAAC+B,OAAO,EAAEC,UAAU,CAAC,GAAGhC,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACiC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGlC,QAAQ,CAAC;IAC7D,SAAS,EAAE;MACTmC,IAAI,EAAE,eAAe;MACrBC,aAAa,EAAE;QACb,aAAa,EAAE;UACbD,IAAI,EAAE,aAAa;UACnBE,OAAO,EAAE,6BAA6B;UACtCC,QAAQ,EAAE,CACR,kCAAkC,EAClC,gCAAgC,EAChC,0CAA0C;QAE9C,CAAC;QACD,mBAAmB,EAAE;UACnBH,IAAI,EAAE,mBAAmB;UACzBE,OAAO,EAAE,0CAA0C;UACnDC,QAAQ,EAAE,CACR,6CAA6C,EAC7C,uBAAuB,EACvB,2CAA2C;QAE/C,CAAC;QACD,YAAY,EAAE;UACZH,IAAI,EAAE,oBAAoB;UAC1BE,OAAO,EAAE,4BAA4B;UACrCC,QAAQ,EAAE,CACR,8BAA8B,EAC9B,6BAA6B,EAC7B,uCAAuC;QAE3C;MACF;IACF,CAAC;IACD,WAAW,EAAE;MACXH,IAAI,EAAE,mBAAmB;MACzBC,aAAa,EAAE;QACb,WAAW,EAAE;UACXD,IAAI,EAAE,oBAAoB;UAC1BE,OAAO,EAAE,oCAAoC;UAC7CC,QAAQ,EAAE,CACR,kBAAkB,EAClB,gCAAgC,EAChC,8BAA8B;QAElC,CAAC;QACD,qBAAqB,EAAE;UACrBH,IAAI,EAAE,qBAAqB;UAC3BE,OAAO,EAAE,0CAA0C;UACnDC,QAAQ,EAAE,CACR,0BAA0B,EAC1B,wCAAwC,EACxC,iBAAiB;QAErB,CAAC;QACD,kBAAkB,EAAE;UAClBH,IAAI,EAAE,kBAAkB;UACxBE,OAAO,EAAE,8BAA8B;UACvCC,QAAQ,EAAE,CACR,kCAAkC,EAClC,uCAAuC;QAE3C;MACF;IACF,CAAC;IACD,SAAS,EAAE;MACTH,IAAI,EAAE,mBAAmB;MACzBC,aAAa,EAAE;QACb,qBAAqB,EAAE;UACrBD,IAAI,EAAE,qBAAqB;UAC3BE,OAAO,EAAE,kCAAkC;UAC3CC,QAAQ,EAAE,CACR,kCAAkC,EAClC,0CAA0C;QAE9C,CAAC;QACD,cAAc,EAAE;UACdH,IAAI,EAAE,sBAAsB;UAC5BE,OAAO,EAAE,4BAA4B;UACrCC,QAAQ,EAAE,CACR,0CAA0C,EAC1C,iCAAiC;QAErC,CAAC;QACD,OAAO,EAAE;UACPH,IAAI,EAAE,kBAAkB;UACxBE,OAAO,EAAE,gCAAgC;UACzCC,QAAQ,EAAE,CACR,mCAAmC,EACnC,oCAAoC;QAExC;MACF;IACF,CAAC;IACD,UAAU,EAAE;MACVH,IAAI,EAAE,kBAAkB;MACxBC,aAAa,EAAE;QACb,YAAY,EAAE;UACZD,IAAI,EAAE,YAAY;UAClBE,OAAO,EAAE,4BAA4B;UACrCC,QAAQ,EAAE,CACR,2BAA2B,EAC3B,sCAAsC;QAE1C,CAAC;QACD,WAAW,EAAE;UACXH,IAAI,EAAE,WAAW;UACjBE,OAAO,EAAE,0BAA0B;UACnCC,QAAQ,EAAE,CACR,kCAAkC,EAClC,4CAA4C;QAEhD,CAAC;QACD,cAAc,EAAE;UACdH,IAAI,EAAE,cAAc;UACpBE,OAAO,EAAE,oBAAoB;UAC7BC,QAAQ,EAAE,CACR,kDAAkD;QAEtD;MACF;IACF,CAAC;IACD,SAAS,EAAE;MACTH,IAAI,EAAE,iBAAiB;MACvBC,aAAa,EAAE;QACb,aAAa,EAAE;UACbD,IAAI,EAAE,aAAa;UACnBE,OAAO,EAAE,gBAAgB;UACzBC,QAAQ,EAAE,CACR,wBAAwB,EACxB,iCAAiC;QAErC,CAAC;QACD,gBAAgB,EAAE;UAChBH,IAAI,EAAE,gBAAgB;UACtBE,OAAO,EAAE,2BAA2B;UACpCC,QAAQ,EAAE,CACR,gCAAgC,EAChC,wCAAwC;QAE5C,CAAC;QACD,sBAAsB,EAAE;UACtBH,IAAI,EAAE,sBAAsB;UAC5BE,OAAO,EAAE,wBAAwB;UACjCC,QAAQ,EAAE,CACR,8CAA8C;QAElD;MACF;IACF,CAAC;IACD,OAAO,EAAE;MACPH,IAAI,EAAE,aAAa;MACnBC,aAAa,EAAE;QACb,YAAY,EAAE;UACZD,IAAI,EAAE,kBAAkB;UACxBE,OAAO,EAAE,2BAA2B;UACpCC,QAAQ,EAAE,CACR,sBAAsB,EACtB,4BAA4B,EAC5B,6BAA6B;QAEjC;MACF;IACF;EACF,CAAC,CAAC;;EAEF;EACApC,SAAS,CAAC,MAAM;IACd;IACAa,WAAW,CAACwB,IAAI,IAAI;MAClB,MAAMC,eAAe,GAAG,CAAC,GAAGD,IAAI,CAAC;MACjC,IAAIC,eAAe,CAACC,MAAM,GAAG,CAAC,EAAE;QAC9BD,eAAe,CAAC,CAAC,CAAC,GAAG;UACnB,GAAGA,eAAe,CAAC,CAAC,CAAC;UACrBpB,OAAO,EAAEsB,MAAM,CAACC,OAAO,CAACV,mBAAmB,CAAC,CAACW,GAAG,CAAC,CAAC,CAACC,EAAE,EAAEC,QAAQ,CAAC,MAAM;YACpED,EAAE,EAAEA,EAAE;YACNE,IAAI,EAAED,QAAQ,CAACX;UACjB,CAAC,CAAC;QACJ,CAAC;MACH;MACA,OAAOK,eAAe;IACxB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACP,mBAAmB,CAAC,CAAC;;EAEzB;EACA/B,SAAS,CAAC,MAAM;IACd,MAAM8C,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACFhB,UAAU,CAAC,IAAI,CAAC;QAChB,MAAMiB,QAAQ,GAAG,MAAM9C,KAAK,CAAC+C,GAAG,CAAC,iBAAiB,CAAC;QACnDhB,sBAAsB,CAACe,QAAQ,CAACE,IAAI,CAAC;QACrCnB,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOoB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDhD,KAAK,CAACgD,KAAK,CAAC,sDAAsD,CAAC;QACnEpB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDgB,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM;IAAEM,YAAY;IAAEC,YAAY;IAAEC,mBAAmB;IAAEC,iBAAiB;IAAEC;EAAoB,CAAC,GAAGlD,KAAK,CAAC,CAAC;EAE3G,MAAMmD,cAAc,GAAG1D,MAAM,CAAC,IAAI,CAAC;EACnC,MAAM2D,QAAQ,GAAG3D,MAAM,CAAC,IAAI,CAAC;;EAE7B;EACAC,SAAS,CAAC,MAAM;IACd2D,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAAC/C,QAAQ,CAAC,CAAC;;EAEd;EACAZ,SAAS,CAAC,MAAM;IACd,IAAI0D,QAAQ,CAACE,OAAO,EAAE;MACpBF,QAAQ,CAACE,OAAO,CAACC,KAAK,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMF,cAAc,GAAGA,CAAA,KAAM;IAAA,IAAAG,qBAAA;IAC3B,CAAAA,qBAAA,GAAAL,cAAc,CAACG,OAAO,cAAAE,qBAAA,uBAAtBA,qBAAA,CAAwBC,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAChE,CAAC;EAED,MAAMC,iBAAiB,GAAIC,CAAC,IAAK;IAC/B9C,QAAQ,CAAC8C,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMC,kBAAkB,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,UAAU,KAAK;IACzD;IACA,MAAMC,WAAW,GAAG;MAClB1D,IAAI,EAAE,MAAM;MACZC,OAAO,EAAE,qBAAqBwD,UAAU,EAAE;MAC1CvD,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;MACrBwD,QAAQ,EAAE;IACZ,CAAC;IAED5D,WAAW,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEmC,WAAW,CAAC,CAAC;IAC3ClD,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACF;MACA,MAAMoD,cAAc,GAAGlC,MAAM,CAACmC,IAAI,CAAC5C,mBAAmB,CAAC,CAAC6C,QAAQ,CAACN,QAAQ,CAAC;MAC1E,MAAM,CAACO,YAAY,EAAEC,WAAW,CAAC,GAAGJ,cAAc,GAAG,CAACJ,QAAQ,EAAE,IAAI,CAAC,GAAGA,QAAQ,CAACS,KAAK,CAAC,GAAG,CAAC;;MAE3F;MACA,MAAMnC,QAAQ,GAAGiC,YAAY,CAAC,CAAC;MAC/B,MAAMG,QAAQ,GAAGpC,QAAQ,KAAK,WAAW,IAAIA,QAAQ,KAAK,SAAS,GAAG,MAAM,GAAG,QAAQ;;MAEvF;MACA,IAAI8B,cAAc,EAAE;QAClB,MAAMO,YAAY,GAAGlD,mBAAmB,CAAC8C,YAAY,CAAC;QACtD,MAAM3C,aAAa,GAAG+C,YAAY,CAAC/C,aAAa;;QAEhD;QACA,MAAMgD,kBAAkB,GAAG1C,MAAM,CAACC,OAAO,CAACP,aAAa,CAAC,CAACQ,GAAG,CAAC,CAAC,CAACC,EAAE,EAAEM,IAAI,CAAC,MAAM;UAC5EN,EAAE,EAAE,GAAGkC,YAAY,IAAIlC,EAAE,EAAE;UAC3BE,IAAI,EAAEI,IAAI,CAAChB;QACb,CAAC,CAAC,CAAC;;QAEH;QACA,MAAMkD,WAAW,GAAG;UAClBrE,IAAI,EAAE,KAAK;UACXC,OAAO,EAAE,6CAA6CkE,YAAY,CAAChD,IAAI,GAAG;UAC1EjB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;UACrBC,OAAO,EAAEgE,kBAAkB;UAC3BtC,QAAQ,EAAEiC;QACZ,CAAC;QAEDhE,WAAW,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE8C,WAAW,CAAC,CAAC;MAC7C,CAAC,MAAM;QACL;QACA,MAAMF,YAAY,GAAGlD,mBAAmB,CAAC8C,YAAY,CAAC;QACtD,MAAMO,eAAe,GAAGH,YAAY,CAAC/C,aAAa,CAAC4C,WAAW,CAAC;;QAE/D;QACA,MAAMO,sBAAsB,GAAG;AACvC,eAAeD,eAAe,CAACjD,OAAO;AACtC;AACA;AACA,EAAEiD,eAAe,CAAChD,QAAQ,CAACM,GAAG,CAAC4C,IAAI,IAAI,KAAKA,IAAI,EAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;AAC9D;AACA,uGAAuG;;QAE/F;QACA,MAAMJ,WAAW,GAAG;UAClBrE,IAAI,EAAE,KAAK;UACXC,OAAO,EAAEsE,sBAAsB;UAC/BrE,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;UACrB2B,QAAQ,EAAEiC,YAAY;UACtBW,WAAW,EAAEV,WAAW;UACxB3C,OAAO,EAAEiD,eAAe,CAACjD,OAAO;UAChCC,QAAQ,EAAEgD,eAAe,CAAChD,QAAQ;UAClClB,OAAO,EAAE,CACP;YAAEyB,EAAE,EAAE,aAAa;YAAEE,IAAI,EAAE;UAAc,CAAC,EAC1C;YAAEF,EAAE,EAAE,QAAQ;YAAEE,IAAI,EAAE;UAAe,CAAC;QAE1C,CAAC;QAEDhC,WAAW,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE8C,WAAW,CAAC,CAAC;;QAE3C;QACA,IAAI,CAAC,iBAAiB,EAAE,2BAA2B,EAAE,qBAAqB,CAAC,CAACP,QAAQ,CAAC,GAAGC,YAAY,IAAIC,WAAW,EAAE,CAAC,EAAE;UACtH;UACA,MAAMW,YAAY,GAAG,MAAMpC,YAAY,CAAC+B,eAAe,CAACnD,IAAI,EAAEW,QAAQ,EAAEoC,QAAQ,CAAC;UAEjF,IAAIS,YAAY,IAAIA,YAAY,CAACC,OAAO,EAAE;YACxC;YACA,MAAMC,aAAa,GAAG;cACpB7E,IAAI,EAAE,KAAK;cACXC,OAAO,EAAE,iEAAiEkE,YAAY,CAAChD,IAAI,kBAAkBmD,eAAe,CAACnD,IAAI,eAAe+C,QAAQ,EAAE;cAC1JhE,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;cACrB2E,aAAa,EAAE,IAAI;cACnBC,QAAQ,EAAEJ,YAAY,CAACI;YACzB,CAAC;YAEDhF,WAAW,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEsD,aAAa,CAAC,CAAC;YAC7CzF,KAAK,CAACwF,OAAO,CAAC,WAAWD,YAAY,CAACI,QAAQ,uCAAuC,CAAC;UACxF;QACF;MACF;;MAEA;MACA,IAAIvB,QAAQ,KAAK,aAAa,EAAE;QAC9B;QACA,MAAMwB,iBAAiB,GAAG;UACxBhF,IAAI,EAAE,KAAK;UACXC,OAAO,EAAE,qDAAqD;UAC9DC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;UACrB8E,YAAY,EAAE;QAChB,CAAC;QAEDlF,WAAW,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEyD,iBAAiB,CAAC,CAAC;MACnD,CAAC,MAAM,IAAIxB,QAAQ,KAAK,QAAQ,EAAE;QAChC;QACA,MAAM0B,eAAe,GAAG;UACtBlF,IAAI,EAAE,KAAK;UACXC,OAAO,EAAE,qFAAqF;UAC9FC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;UACrBC,OAAO,EAAE,CACP;YAAEyB,EAAE,EAAE,SAAS;YAAEE,IAAI,EAAE;UAAgB,CAAC,EACxC;YAAEF,EAAE,EAAE,WAAW;YAAEE,IAAI,EAAE;UAAoB,CAAC,EAC9C;YAAEF,EAAE,EAAE,SAAS;YAAEE,IAAI,EAAE;UAAoB,CAAC,EAC5C;YAAEF,EAAE,EAAE,UAAU;YAAEE,IAAI,EAAE;UAAmB,CAAC,EAC5C;YAAEF,EAAE,EAAE,SAAS;YAAEE,IAAI,EAAE;UAAkB,CAAC,EAC1C;YAAEF,EAAE,EAAE,OAAO;YAAEE,IAAI,EAAE;UAAc,CAAC;QAExC,CAAC;QAEDhC,WAAW,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE2D,eAAe,CAAC,CAAC;MACjD;IACF,CAAC,CAAC,OAAO9C,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;;MAEhD;MACA,MAAM+C,YAAY,GAAG;QACnBnF,IAAI,EAAE,KAAK;QACXC,OAAO,EAAE,wGAAwG;QACjHC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;QACrBiF,OAAO,EAAE;MACX,CAAC;MAEDrF,WAAW,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE4D,YAAY,CAAC,CAAC;IAC9C,CAAC,SAAS;MACR3E,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;;EAED;EACA,MAAM6E,wBAAwB,GAAG,MAAAA,CAAO7B,QAAQ,EAAEC,UAAU,KAAK;IAC/D;IACA,MAAMC,WAAW,GAAG;MAClB1D,IAAI,EAAE,MAAM;MACZC,OAAO,EAAE,qBAAqBwD,UAAU,EAAE;MAC1CvD,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;MACrBwD,QAAQ,EAAE;IACZ,CAAC;IAED5D,WAAW,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEmC,WAAW,CAAC,CAAC;IAC3ClD,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACF;MACA,MAAMsB,QAAQ,GAAG0B,QAAQ,CAAC,CAAC;MAC3B,MAAMU,QAAQ,GAAGV,QAAQ,KAAK,WAAW,IAAIA,QAAQ,KAAK,SAAS,GAAG,MAAM,GAAG,QAAQ;;MAEvF;MACA,IAAI8B,eAAe,GAAG,EAAE;MAExB,QAAO9B,QAAQ;QACb,KAAK,SAAS;UACZ8B,eAAe,GAAG,uGAAuG;UACzH;QACF,KAAK,WAAW;UACdA,eAAe,GAAG,wGAAwG;UAC1H;QACF,KAAK,SAAS;UACZA,eAAe,GAAG,+GAA+G;UACjI;QACF,KAAK,UAAU;UACbA,eAAe,GAAG,4FAA4F;UAC9G;QACF,KAAK,SAAS;UACZA,eAAe,GAAG,iGAAiG;UACnH;QACF,KAAK,OAAO;UACVA,eAAe,GAAG,gHAAgH;UAClI;QACF;UACEA,eAAe,GAAG,4EAA4E;MAClG;MAEA,MAAMjB,WAAW,GAAG;QAClBrE,IAAI,EAAE,KAAK;QACXC,OAAO,EAAEqF,eAAe;QACxBpF,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;QACrB2B,QAAQ,EAAEA;MACZ,CAAC;MAED/B,WAAW,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE8C,WAAW,CAAC,CAAC;;MAE3C;MACA,IAAI,CAAC,SAAS,EAAE,WAAW,EAAE,SAAS,CAAC,CAACP,QAAQ,CAACN,QAAQ,CAAC,EAAE;QAC1D;QACA,MAAMmB,YAAY,GAAG,MAAMpC,YAAY,CAACkB,UAAU,EAAE3B,QAAQ,EAAEoC,QAAQ,CAAC;QAEvE,IAAIS,YAAY,IAAIA,YAAY,CAACC,OAAO,EAAE;UACxC;UACA,MAAMC,aAAa,GAAG;YACpB7E,IAAI,EAAE,KAAK;YACXC,OAAO,EAAE,kCAAkCwD,UAAU,CAAC8B,WAAW,CAAC,CAAC,eAAezD,QAAQ,eAAeoC,QAAQ,EAAE;YACnHhE,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;YACrB2E,aAAa,EAAE,IAAI;YACnBC,QAAQ,EAAEJ,YAAY,CAACI;UACzB,CAAC;UAEDhF,WAAW,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEsD,aAAa,CAAC,CAAC;UAC7CzF,KAAK,CAACwF,OAAO,CAAC,WAAWD,YAAY,CAACI,QAAQ,uCAAuC,CAAC;QACxF;MACF;IACF,CAAC,CAAC,OAAO3C,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;;MAEhD;MACA,MAAM+C,YAAY,GAAG;QACnBnF,IAAI,EAAE,KAAK;QACXC,OAAO,EAAE,wGAAwG;QACjHC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;QACrBiF,OAAO,EAAE;MACX,CAAC;MAEDrF,WAAW,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE4D,YAAY,CAAC,CAAC;IAC9C,CAAC,SAAS;MACR3E,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMgF,YAAY,GAAG,MAAOpC,CAAC,IAAK;IAChCA,CAAC,CAACqC,cAAc,CAAC,CAAC;IAClB,IAAI,CAACpF,KAAK,CAACqF,IAAI,CAAC,CAAC,IAAI,CAACjF,kBAAkB,IAAI,CAACE,mBAAmB,EAAE;;IAElE;IACA,MAAM+C,WAAW,GAAG;MAClB1D,IAAI,EAAE,MAAM;MACZC,OAAO,EAAEI,KAAK;MACdH,SAAS,EAAE,IAAIC,IAAI,CAAC;IACtB,CAAC;IAEDJ,WAAW,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEmC,WAAW,CAAC,CAAC;IAC3CpD,QAAQ,CAAC,EAAE,CAAC;IACZE,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACF;MACA,MAAMyB,QAAQ,GAAG,MAAM9C,KAAK,CAACwG,IAAI,CAAC,sBAAsB,EAAE;QACxDC,OAAO,EAAEvF,KAAK;QACdwF,WAAW,EAAE;MACf,CAAC,CAAC;;MAEF;MACA,MAAM/D,QAAQ,GAAGU,mBAAmB,CAACnC,KAAK,CAAC;MAC3C,MAAM6D,QAAQ,GAAGzB,iBAAiB,CAACpC,KAAK,CAAC;;MAEzC;MACA,MAAMyF,eAAe,GAAG;QACtB9F,IAAI,EAAE,KAAK;QACXC,OAAO,EAAEgC,QAAQ,CAACE,IAAI,CAACyD,OAAO;QAC9B1F,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;QACrB4F,aAAa,EAAE9D,QAAQ,CAACE,IAAI,CAAC4D,aAAa,IAAI;MAChD,CAAC;MAEDhG,WAAW,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEuE,eAAe,CAAC,CAAC;;MAE/C;MACA,IAAI7D,QAAQ,CAACE,IAAI,CAAC4D,aAAa,IAAI1F,KAAK,CAACkF,WAAW,CAAC,CAAC,CAACzB,QAAQ,CAAC,WAAW,CAAC,IACxEzD,KAAK,CAACkF,WAAW,CAAC,CAAC,CAACzB,QAAQ,CAAC,OAAO,CAAC,IAAIzD,KAAK,CAACkF,WAAW,CAAC,CAAC,CAACzB,QAAQ,CAAC,SAAS,CAAC,EAAE;QAEpF;QACA,MAAMkC,gBAAgB,GAAG;UACvBhG,IAAI,EAAE,KAAK;UACXC,OAAO,EAAE,6DAA6D;UACtEC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;UACrB8F,UAAU,EAAE,CACV;YAAEC,KAAK,EAAE,2BAA2B;YAAEC,WAAW,EAAE;UAAuG,CAAC,EAC3J;YAAED,KAAK,EAAE,4BAA4B;YAAEC,WAAW,EAAE;UAA+H,CAAC,EACpL;YAAED,KAAK,EAAE,uBAAuB;YAAEC,WAAW,EAAE;UAA4G,CAAC,EAC5J;YAAED,KAAK,EAAE,oBAAoB;YAAEC,WAAW,EAAE;UAAyI,CAAC;QAE1L,CAAC;QAEDpG,WAAW,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEyE,gBAAgB,CAAC,CAAC;;QAEhD;QACA,MAAMrB,YAAY,GAAG,MAAMpC,YAAY,CAAClC,KAAK,EAAEyB,QAAQ,EAAEoC,QAAQ,CAAC;QAElE,IAAIS,YAAY,CAACC,OAAO,EAAE;UACxB;UACA,MAAMC,aAAa,GAAG;YACpB7E,IAAI,EAAE,KAAK;YACXC,OAAO,EAAE,wEAAwE6B,QAAQ,eAAeoC,QAAQ,EAAE;YAClHhE,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;YACrB2E,aAAa,EAAE,IAAI;YACnBC,QAAQ,EAAEJ,YAAY,CAACI;UACzB,CAAC;UAEDhF,WAAW,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEsD,aAAa,CAAC,CAAC;UAC7CzF,KAAK,CAACwF,OAAO,CAAC,WAAWD,YAAY,CAACI,QAAQ,uCAAuC,CAAC;QACxF;MACF;IACF,CAAC,CAAC,OAAO3C,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;;MAE9C;MACA,MAAM+C,YAAY,GAAG;QACnBnF,IAAI,EAAE,KAAK;QACXC,OAAO,EAAE,gFAAgF;QACzFC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;QACrBiF,OAAO,EAAE;MACX,CAAC;MAEDrF,WAAW,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE4D,YAAY,CAAC,CAAC;MAC5C/F,KAAK,CAACgD,KAAK,CAAC,mDAAmD,CAAC;IAClE,CAAC,SAAS;MACR5B,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAM4F,gBAAgB,GAAIC,UAAU,IAAK;IACvC;IACA,MAAM3C,WAAW,GAAG;MAClB1D,IAAI,EAAE,MAAM;MACZC,OAAO,EAAEoG,UAAU;MACnBnG,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;MACrBmG,OAAO,EAAE;IACX,CAAC;IAEDvG,WAAW,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEmC,WAAW,CAAC,CAAC;IAC3ClD,YAAY,CAAC,IAAI,CAAC;IAClBE,qBAAqB,CAAC,KAAK,CAAC;;IAE5B;IACA6F,cAAc,CAACF,UAAU,EAAE,OAAO,CAAC;EACrC,CAAC;EAED,MAAMG,iBAAiB,GAAG,MAAOC,SAAS,IAAK;IAC7C;IACA,MAAM/C,WAAW,GAAG;MAClB1D,IAAI,EAAE,MAAM;MACZC,OAAO,EAAE,gBAAgB;MACzBC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;MACrBuG,OAAO,EAAE,IAAI;MACbC,QAAQ,EAAEC,GAAG,CAACC,eAAe,CAACJ,SAAS;IACzC,CAAC;IAED1G,WAAW,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEmC,WAAW,CAAC,CAAC;IAC3ClD,YAAY,CAAC,IAAI,CAAC;IAClBI,sBAAsB,CAAC,KAAK,CAAC;IAE7B,IAAI;MACF;MACA,MAAMkG,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEP,SAAS,CAAC;;MAEnC;MACA,MAAMxE,QAAQ,GAAG,MAAM9C,KAAK,CAACwG,IAAI,CAAC,oBAAoB,EAAEmB,QAAQ,EAAE;QAChEG,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;;MAEF;MACA,MAAM5C,WAAW,GAAG;QAClBrE,IAAI,EAAE,KAAK;QACXC,OAAO,EAAEgC,QAAQ,CAACE,IAAI,CAACyD,OAAO;QAC9B1F,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;QACrB+G,eAAe,EAAEjF,QAAQ,CAACE,IAAI,CAAC+E,eAAe;QAC9CpC,aAAa,EAAE7C,QAAQ,CAACE,IAAI,CAAC2C,aAAa;QAC1CC,QAAQ,EAAE9C,QAAQ,CAACE,IAAI,CAAC4C;MAC1B,CAAC;MAEDhF,WAAW,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE8C,WAAW,CAAC,CAAC;;MAE3C;MACA,IAAIpC,QAAQ,CAACE,IAAI,CAAC2C,aAAa,EAAE;QAC/B1F,KAAK,CAACwF,OAAO,CAAC,WAAW3C,QAAQ,CAACE,IAAI,CAAC4C,QAAQ,uCAAuC,CAAC;MACzF;IACF,CAAC,CAAC,OAAO3C,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;;MAE/C;MACA,MAAM+C,YAAY,GAAG;QACnBnF,IAAI,EAAE,KAAK;QACXC,OAAO,EAAE,8EAA8E;QACvFC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;QACrBiF,OAAO,EAAE;MACX,CAAC;MAEDrF,WAAW,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE4D,YAAY,CAAC,CAAC;MAC5C/F,KAAK,CAACgD,KAAK,CAAC,iDAAiD,CAAC;IAChE,CAAC,SAAS;MACR5B,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAM+F,cAAc,GAAG,MAAAA,CAAOX,OAAO,EAAE5F,IAAI,KAAK;IAC9C,IAAI;MACF;MACA,MAAMiC,QAAQ,GAAG,MAAM9C,KAAK,CAACwG,IAAI,CAAC,sBAAsB,EAAE;QACxDC,OAAO;QACPC,WAAW,EAAE7F;MACf,CAAC,CAAC;;MAEF;MACA,MAAMqE,WAAW,GAAG;QAClBrE,IAAI,EAAE,KAAK;QACXC,OAAO,EAAEgC,QAAQ,CAACE,IAAI,CAACyD,OAAO;QAC9B1F,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;QACrB2E,aAAa,EAAE7C,QAAQ,CAACE,IAAI,CAAC2C,aAAa;QAC1CC,QAAQ,EAAE9C,QAAQ,CAACE,IAAI,CAAC4C;MAC1B,CAAC;MAEDhF,WAAW,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE8C,WAAW,CAAC,CAAC;;MAE3C;MACA,IAAIpC,QAAQ,CAACE,IAAI,CAAC2C,aAAa,EAAE;QAC/B1F,KAAK,CAACwF,OAAO,CAAC,WAAW3C,QAAQ,CAACE,IAAI,CAAC4C,QAAQ,uCAAuC,CAAC;MACzF;IACF,CAAC,CAAC,OAAO3C,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;;MAEjD;MACA,MAAM+C,YAAY,GAAG;QACnBnF,IAAI,EAAE,KAAK;QACXC,OAAO,EAAE,gFAAgF;QACzFC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;QACrBiF,OAAO,EAAE;MACX,CAAC;MAEDrF,WAAW,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE4D,YAAY,CAAC,CAAC;MAC5C/F,KAAK,CAACgD,KAAK,CAAC,mDAAmD,CAAC;IAClE,CAAC,SAAS;MACR5B,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAM2G,gBAAgB,GAAGA,CAAA,KAAM;IAC7BzG,qBAAqB,CAAC,CAACD,kBAAkB,CAAC;IAC1CG,sBAAsB,CAAC,KAAK,CAAC;EAC/B,CAAC;EAED,MAAMwG,iBAAiB,GAAGA,CAAA,KAAM;IAC9BxG,sBAAsB,CAAC,CAACD,mBAAmB,CAAC;IAC5CD,qBAAqB,CAAC,KAAK,CAAC;EAC9B,CAAC;EAED,oBACEhB,OAAA;IAAK2H,SAAS,EAAC,uEAAuE;IAAAC,QAAA,gBAEpF5H,OAAA;MAAK2H,SAAS,EAAC,oFAAoF;MAAAC,QAAA,gBACjG5H,OAAA;QAAK2H,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAChC5H,OAAA;UAAK6H,KAAK,EAAC,4BAA4B;UAACF,SAAS,EAAC,cAAc;UAACG,IAAI,EAAC,MAAM;UAACC,OAAO,EAAC,WAAW;UAACC,MAAM,EAAC,cAAc;UAAAJ,QAAA,eACpH5H,OAAA;YAAMiI,aAAa,EAAC,OAAO;YAACC,cAAc,EAAC,OAAO;YAACC,WAAW,EAAE,CAAE;YAACC,CAAC,EAAC;UAA2G;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChL,CAAC,eACNxI,OAAA;UAAI2H,SAAS,EAAC,eAAe;UAAAC,QAAA,EAAC;QAAY;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C,CAAC,eACNxI,OAAA;QACEyI,OAAO,EAAEvI,OAAQ;QACjByH,SAAS,EAAC,mDAAmD;QAC7D,cAAW,eAAe;QAAAC,QAAA,eAE1B5H,OAAA;UAAK6H,KAAK,EAAC,4BAA4B;UAACF,SAAS,EAAC,SAAS;UAACI,OAAO,EAAC,WAAW;UAACD,IAAI,EAAC,cAAc;UAAAF,QAAA,eACjG5H,OAAA;YAAM0I,QAAQ,EAAC,SAAS;YAACN,CAAC,EAAC,oMAAoM;YAACO,QAAQ,EAAC;UAAS;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAGNxI,OAAA;MAAK2H,SAAS,EAAC,4BAA4B;MAAAC,QAAA,GACxCxH,QAAQ,CAAC8B,GAAG,CAAC,CAACgE,OAAO,EAAE0C,KAAK,kBAC3B5I,OAAA,CAACL,WAAW;QAEVuG,OAAO,EAAEA,OAAQ;QACjB2C,cAAc,EAAEhF;MAAmB,GAF9B+E,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGX,CACF,CAAC,EACD3H,SAAS,iBACRb,OAAA;QAAK2H,SAAS,EAAC,wBAAwB;QAAAC,QAAA,eACrC5H,OAAA;UAAK2H,SAAS,EAAC,0CAA0C;UAAAC,QAAA,eACvD5H,OAAA;YAAK2H,SAAS,EAAC,gBAAgB;YAAAC,QAAA,gBAC7B5H,OAAA;cAAK2H,SAAS,EAAC;YAAiD;cAAAU,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACvExI,OAAA;cAAK2H,SAAS,EAAC,iDAAiD;cAACmB,KAAK,EAAE;gBAAEC,cAAc,EAAE;cAAO;YAAE;cAAAV,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAC1GxI,OAAA;cAAK2H,SAAS,EAAC,iDAAiD;cAACmB,KAAK,EAAE;gBAAEC,cAAc,EAAE;cAAO;YAAE;cAAAV,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACvG;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN,eACDxI,OAAA;QAAKgJ,GAAG,EAAE/F;MAAe;QAAAoF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC,EAGLzH,kBAAkB,iBACjBf,OAAA;MAAK2H,SAAS,EAAC,+CAA+C;MAAAC,QAAA,eAC5D5H,OAAA,CAACJ,UAAU;QAACqJ,YAAY,EAAEvC,gBAAiB;QAACwC,QAAQ,EAAEA,CAAA,KAAMlI,qBAAqB,CAAC,KAAK;MAAE;QAAAqH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzF,CACN,EAGAvH,mBAAmB,iBAClBjB,OAAA;MAAK2H,SAAS,EAAC,+CAA+C;MAAAC,QAAA,eAC5D5H,OAAA,CAACH,WAAW;QAACsJ,aAAa,EAAErC,iBAAkB;QAACoC,QAAQ,EAAEA,CAAA,KAAMhI,sBAAsB,CAAC,KAAK;MAAE;QAAAmH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7F,CACN,eAGDxI,OAAA;MAAMoJ,QAAQ,EAAEtD,YAAa;MAAC6B,SAAS,EAAC,gDAAgD;MAAAC,QAAA,gBACtF5H,OAAA;QACEM,IAAI,EAAC,QAAQ;QACbmI,OAAO,EAAEhB,gBAAiB;QAC1BE,SAAS,EAAE,4CAA4C5G,kBAAkB,GAAG,yBAAyB,GAAG,sCAAsC,EAAG;QACjJ,cAAW,aAAa;QAAA6G,QAAA,eAExB5H,OAAA;UAAK6H,KAAK,EAAC,4BAA4B;UAACF,SAAS,EAAC,SAAS;UAACG,IAAI,EAAC,MAAM;UAACC,OAAO,EAAC,WAAW;UAACC,MAAM,EAAC,cAAc;UAAAJ,QAAA,eAC/G5H,OAAA;YAAMiI,aAAa,EAAC,OAAO;YAACC,cAAc,EAAC,OAAO;YAACC,WAAW,EAAE,CAAE;YAACC,CAAC,EAAC;UAAwG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7K;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACTxI,OAAA;QACEM,IAAI,EAAC,QAAQ;QACbmI,OAAO,EAAEf,iBAAkB;QAC3BC,SAAS,EAAE,4CAA4C1G,mBAAmB,GAAG,2BAA2B,GAAG,sCAAsC,EAAG;QACpJ,cAAW,cAAc;QAAA2G,QAAA,eAEzB5H,OAAA;UAAK6H,KAAK,EAAC,4BAA4B;UAACF,SAAS,EAAC,SAAS;UAACG,IAAI,EAAC,MAAM;UAACC,OAAO,EAAC,WAAW;UAACC,MAAM,EAAC,cAAc;UAAAJ,QAAA,eAC/G5H,OAAA;YAAMiI,aAAa,EAAC,OAAO;YAACC,cAAc,EAAC,OAAO;YAACC,WAAW,EAAE,CAAE;YAACC,CAAC,EAAC;UAA2J;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChO;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACTxI,OAAA;QACEM,IAAI,EAAC,MAAM;QACXsD,KAAK,EAAEjD,KAAM;QACb0I,QAAQ,EAAE5F,iBAAkB;QAC5B6F,WAAW,EAAC,sBAAsB;QAClC3B,SAAS,EAAC,sIAAsI;QAChJ4B,QAAQ,EAAE1I,SAAS,IAAIE,kBAAkB,IAAIE,mBAAoB;QACjE+H,GAAG,EAAE9F;MAAS;QAAAmF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACf,CAAC,eACFxI,OAAA;QACEM,IAAI,EAAC,QAAQ;QACbqH,SAAS,EAAC,6GAA6G;QACvH4B,QAAQ,EAAE,CAAC5I,KAAK,CAACqF,IAAI,CAAC,CAAC,IAAInF,SAAS,IAAIE,kBAAkB,IAAIE,mBAAoB;QAClF,cAAW,cAAc;QAAA2G,QAAA,eAEzB5H,OAAA;UAAK6H,KAAK,EAAC,4BAA4B;UAACF,SAAS,EAAC,SAAS;UAACI,OAAO,EAAC,WAAW;UAACD,IAAI,EAAC,cAAc;UAAAF,QAAA,eACjG5H,OAAA;YAAM0I,QAAQ,EAAC,SAAS;YAACN,CAAC,EAAC,4JAA4J;YAACO,QAAQ,EAAC;UAAS;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1M;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAACrI,EAAA,CA3xBIF,OAAO;EAAA,QA4NyFH,KAAK;AAAA;AAAA0J,EAAA,GA5NrGvJ,OAAO;AA6xBb,eAAeA,OAAO;AAAC,IAAAuJ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}