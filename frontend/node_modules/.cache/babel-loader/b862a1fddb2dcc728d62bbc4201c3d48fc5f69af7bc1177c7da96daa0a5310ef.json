{"ast":null,"code":"import React,{createContext,useState,useEffect}from'react';import{useNavigate}from'react-router-dom';import jwt_decode from'jwt-decode';// Change this line at the top of the file\nimport axios from'../services/axios';import{toast}from'react-toastify';import{jsx as _jsx}from\"react/jsx-runtime\";export const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const navigate=useNavigate();// Fetch user profile data from the server\nconst fetchUserProfile=async()=>{try{const response=await axios.get('/api/users/profile');// Merge the profile data with the basic user data\nsetUser(prevUser=>({...prevUser,...response.data}));return response.data;}catch(error){console.error('Error fetching user profile:',error);if(error.response&&error.response.status===401){// Unauthorized, token might be invalid\nlogout();}else{// For other errors, don't logout but return null and show error\ntoast.error('Failed to load profile data. Please try again later.');}return null;}};// Check if user is already logged in on component mount\nuseEffect(()=>{const token=localStorage.getItem('token');if(token){try{const decoded=jwt_decode(token);// Check if token is expired\nconst currentTime=Date.now()/1000;if(decoded.exp<currentTime){// Token expired, log out user\nlogout();setLoading(false);}else{// Set basic user data from token\nsetUser(decoded);// Set authorization header for all requests\naxios.defaults.headers.common['Authorization']=`Bearer ${token}`;// Fetch complete user profile data\nfetchUserProfile().then(()=>{setLoading(false);}).catch(()=>{setLoading(false);});}}catch(error){console.error('Invalid token:',error);logout();setLoading(false);}}else{setLoading(false);}},[]);// Login function\nconst login=async(email,password)=>{try{setLoading(true);const response=await axios.post('/api/auth/login',{email,password});const{token}=response.data;// Save token to localStorage\nlocalStorage.setItem('token',token);// Decode token and set user\nconst decoded=jwt_decode(token);setUser(decoded);// Set authorization header for all requests\naxios.defaults.headers.common['Authorization']=`Bearer ${token}`;toast.success('Login successful!');navigate('/dashboard');return true;}catch(error){var _error$response,_error$response$data;console.error('Login error:',error);toast.error(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Login failed. Please try again.');return false;}finally{setLoading(false);}};// Register function\nconst register=async userData=>{try{setLoading(true);const response=await axios.post('/api/auth/register',userData);toast.success('Registration successful! Please log in.');navigate('/login');return true;}catch(error){var _error$response2,_error$response2$data;console.error('Registration error:',error);toast.error(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Registration failed. Please try again.');return false;}finally{setLoading(false);}};// Logout function\nconst logout=()=>{localStorage.removeItem('token');setUser(null);delete axios.defaults.headers.common['Authorization'];toast.info('You have been logged out.');navigate('/');};// Check if user is admin\nconst isAdmin=()=>{return user&&user.role==='admin';};// Update user data after profile changes\nconst updateUser=userData=>{// Update the user state with the new data\nsetUser(prevUser=>({...prevUser,name:userData.name,phone:userData.phone,department:userData.department,updatedAt:userData.updatedAt}));};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,loading,login,register,logout,isAdmin,updateUser,fetchUserProfile},children:children});};","map":{"version":3,"names":["React","createContext","useState","useEffect","useNavigate","jwt_decode","axios","toast","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","loading","setLoading","navigate","fetchUserProfile","response","get","prevUser","data","error","console","status","logout","token","localStorage","getItem","decoded","currentTime","Date","now","exp","defaults","headers","common","then","catch","login","email","password","post","setItem","success","_error$response","_error$response$data","message","register","userData","_error$response2","_error$response2$data","removeItem","info","isAdmin","role","updateUser","name","phone","department","updatedAt","Provider","value"],"sources":["C:/Users/thava/OneDrive/Desktop/New folder/Complaint-Management-System/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport jwt_decode from 'jwt-decode';\r\n// Change this line at the top of the file\r\nimport axios from '../services/axios';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n  \r\n  // Fetch user profile data from the server\r\n  const fetchUserProfile = async () => {\r\n    try {\r\n      const response = await axios.get('/api/users/profile');\r\n      // Merge the profile data with the basic user data\r\n      setUser(prevUser => ({\r\n        ...prevUser,\r\n        ...response.data\r\n      }));\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching user profile:', error);\r\n      if (error.response && error.response.status === 401) {\r\n        // Unauthorized, token might be invalid\r\n        logout();\r\n      } else {\r\n        // For other errors, don't logout but return null and show error\r\n        toast.error('Failed to load profile data. Please try again later.');\r\n      }\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Check if user is already logged in on component mount\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      try {\r\n        const decoded = jwt_decode(token);\r\n        // Check if token is expired\r\n        const currentTime = Date.now() / 1000;\r\n        if (decoded.exp < currentTime) {\r\n          // Token expired, log out user\r\n          logout();\r\n          setLoading(false);\r\n        } else {\r\n          // Set basic user data from token\r\n          setUser(decoded);\r\n          // Set authorization header for all requests\r\n          axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n          // Fetch complete user profile data\r\n          fetchUserProfile()\r\n            .then(() => {\r\n              setLoading(false);\r\n            })\r\n            .catch(() => {\r\n              setLoading(false);\r\n            });\r\n        }\r\n      } catch (error) {\r\n        console.error('Invalid token:', error);\r\n        logout();\r\n        setLoading(false);\r\n      }\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (email, password) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post('/api/auth/login', { email, password });\r\n      const { token } = response.data;\r\n      \r\n      // Save token to localStorage\r\n      localStorage.setItem('token', token);\r\n      \r\n      // Decode token and set user\r\n      const decoded = jwt_decode(token);\r\n      setUser(decoded);\r\n      \r\n      // Set authorization header for all requests\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      \r\n      toast.success('Login successful!');\r\n      navigate('/dashboard');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      toast.error(error.response?.data?.message || 'Login failed. Please try again.');\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Register function\r\n  const register = async (userData) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post('/api/auth/register', userData);\r\n      toast.success('Registration successful! Please log in.');\r\n      navigate('/login');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      toast.error(error.response?.data?.message || 'Registration failed. Please try again.');\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setUser(null);\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    toast.info('You have been logged out.');\r\n    navigate('/');\r\n  };\r\n\r\n  // Check if user is admin\r\n  const isAdmin = () => {\r\n    return user && user.role === 'admin';\r\n  };\r\n\r\n  // Update user data after profile changes\r\n  const updateUser = (userData) => {\r\n    // Update the user state with the new data\r\n    setUser(prevUser => ({\r\n      ...prevUser,\r\n      name: userData.name,\r\n      phone: userData.phone,\r\n      department: userData.department,\r\n      updatedAt: userData.updatedAt\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ \r\n      user, \r\n      loading, \r\n      login, \r\n      register, \r\n      logout,\r\n      isAdmin,\r\n      updateUser,\r\n      fetchUserProfile\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}