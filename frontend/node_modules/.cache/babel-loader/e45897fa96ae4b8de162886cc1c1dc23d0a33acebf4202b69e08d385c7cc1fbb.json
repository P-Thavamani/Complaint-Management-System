{"ast":null,"code":"import React,{useState,useRef,useEffect}from'react';import axios from'../../services/axios';import{toast}from'react-toastify';import ChatMessage from'./ChatMessage';import VoiceInput from'./VoiceInput';import ImageUpload from'./ImageUpload';import{useAI}from'../hooks/useAI';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Chatbot=_ref=>{let{onClose}=_ref;// Initialize with default welcome message\nconst[messages,setMessages]=useState([{type:'bot',content:'Hello! I\\'m your AI assistant. How can I help you today? You can type your complaint, use voice input, or upload an image of the issue.',timestamp:new Date(),options:[]}]);// Input state and refs\nconst[input,setInput]=useState('');const[isLoading,setIsLoading]=useState(false);const[isVoiceInputActive,setIsVoiceInputActive]=useState(false);const[isImageUploadActive,setIsImageUploadActive]=useState(false);const[showAIFeatures,setShowAIFeatures]=useState(false);// Initialize complaint categories state\nconst[loading,setLoading]=useState(false);const[complaintCategories,setComplaintCategories]=useState({});// Update initial message with categories from state\nuseEffect(()=>{// Only update if we have categories\nif(Object.keys(complaintCategories).length>0){// Update initial message with categories\nsetMessages(prev=>{const updatedMessages=[...prev];if(updatedMessages.length>0){updatedMessages[0]={...updatedMessages[0],options:Object.entries(complaintCategories).map(_ref2=>{let[id,category]=_ref2;return{id:id,text:category.name};})};}return updatedMessages;});}},[complaintCategories]);// Fetch categories from API\nuseEffect(()=>{const fetchCategories=async()=>{try{setLoading(true);const response=await axios.get('/api/categories/');console.log('Categories API response:',response.data);setComplaintCategories(response.data);setLoading(false);}catch(error){console.error('Error fetching categories:',error);toast.error('Failed to load categories. Using default categories.');setLoading(false);}};fetchCategories();},[]);// Use the AI hook for ticket processing\nconst{isProcessing,createTicket,categorizeComplaint,determinePriority,determineAssignment}=useAI();const messagesEndRef=useRef(null);const inputRef=useRef(null);// Scroll to bottom of messages\nuseEffect(()=>{scrollToBottom();},[messages]);// Focus input field when component mounts\nuseEffect(()=>{if(inputRef.current){inputRef.current.focus();}},[]);const scrollToBottom=()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:'smooth'});};const handleInputChange=e=>{setInput(e.target.value);};// Handle option selection from the chatbot options\nconst handleOptionSelect=async(optionId,optionText)=>{// Add user message showing their selection\nconst userMessage={type:'user',content:`I need help with: ${optionText}`,timestamp:new Date(),isOption:true};setMessages(prev=>[...prev,userMessage]);setIsLoading(true);try{console.log('Selected option:',optionId,optionText);console.log('Available categories:',complaintCategories);// Check if this is a main category or subcategory\nconst isMainCategory=Object.keys(complaintCategories).includes(optionId);const[mainCategory,subCategory]=isMainCategory?[optionId,null]:optionId.split('.');console.log('Is main category:',isMainCategory);console.log('Main category:',mainCategory);console.log('Subcategory:',subCategory);// Process the selected option\nconst category=mainCategory;// Use the main category ID\nconst priority=category==='technical'||category==='service'?'high':'medium';// If this is a main category, show subcategories\nif(isMainCategory){const categoryData=complaintCategories[mainCategory];const subcategories=categoryData.subcategories;// Create options for subcategories\nconst subcategoryOptions=Object.entries(subcategories).map(_ref3=>{let[id,data]=_ref3;return{id:`${mainCategory}.${id}`,text:data.name};});// Add bot response with subcategories\nconst botResponse={type:'bot',content:`Please select a specific issue related to ${categoryData.name}:`,timestamp:new Date(),options:subcategoryOptions,category:mainCategory};setMessages(prev=>[...prev,botResponse]);}else{// This is a subcategory selection\nconst categoryData=complaintCategories[mainCategory];const subcategoryData=categoryData.subcategories[subCategory];// Create the problem and solution message\nconst problemSolutionContent=`\n**Problem:** ${subcategoryData.problem}\n\n**Solution:**\n${subcategoryData.solution.map(step=>`â€¢ ${step}`).join('\\n')}\n\nIf the provided solution does not work, you can click \"Open Ticket\" to get help from our support team.`;// Add bot response with problem and solution\nconst botResponse={type:'bot',content:problemSolutionContent,timestamp:new Date(),category:mainCategory,subcategory:subCategory,problem:subcategoryData.problem,solution:subcategoryData.solution,options:[{id:'open_ticket',text:'Open Ticket'},{id:'solved',text:'Issue Solved'}]};setMessages(prev=>[...prev,botResponse]);// If it's a serious issue, create a ticket automatically\nif(['technical.crash','billing.duplicate_charges','service.unavailable'].includes(`${mainCategory}.${subCategory}`)){// Create ticket with AI-determined category and priority\nconst ticketResult=await createTicket(subcategoryData.name,category,priority);if(ticketResult&&ticketResult.success){// Add ticket creation confirmation\nconst ticketMessage={type:'bot',content:`I've automatically created a ticket for this issue. Category: ${categoryData.name}, Subcategory: ${subcategoryData.name}, Priority: ${priority}`,timestamp:new Date(),ticketCreated:true,ticketId:ticketResult.ticketId};setMessages(prev=>[...prev,ticketMessage]);toast.success(`Ticket #${ticketResult.ticketId} has been created for your complaint.`);}}}// Handle special options\nif(optionId==='open_ticket'){// Show ticket form\nconst ticketFormMessage={type:'bot',content:'Please provide additional details about your issue:',timestamp:new Date(),isTicketForm:true};setMessages(prev=>[...prev,ticketFormMessage]);}else if(optionId==='solved'){// Thank the user\nconst thankYouMessage={type:'bot',content:'Great! I\\'m glad the solution helped. Is there anything else I can assist you with?',timestamp:new Date(),options:Object.entries(complaintCategories).map(_ref4=>{let[id,category]=_ref4;return{id:id,text:category.name};})};setMessages(prev=>[...prev,thankYouMessage]);}}catch(error){console.error('Error processing option:',error);// Add error message to chat\nconst errorMessage={type:'bot',content:'Sorry, I encountered an error processing your selection. Please try again or type your issue directly.',timestamp:new Date(),isError:true};setMessages(prev=>[...prev,errorMessage]);}finally{setIsLoading(false);}};// Legacy handleOptionSelect for backward compatibility\nconst handleLegacyOptionSelect=async(optionId,optionText)=>{// Add user message showing their selection\nconst userMessage={type:'user',content:`I need help with: ${optionText}`,timestamp:new Date(),isOption:true};setMessages(prev=>[...prev,userMessage]);setIsLoading(true);try{// Process the selected option\nconst category=optionId;// Use the option ID as the category\nconst priority=optionId==='technical'||optionId==='service'?'high':'medium';// Add bot response based on the selected option\nlet responseContent='';switch(optionId){case'billing':responseContent='I understand you\\'re having a billing issue. Could you please provide more details about the problem?';break;case'technical':responseContent='I see you\\'re experiencing a technical problem. Could you describe the issue you\\'re facing in detail?';break;case'service':responseContent='I\\'m sorry to hear you have a service complaint. Please tell me more about the service issue you encountered.';break;case'feedback':responseContent='Thank you for wanting to provide feedback. I\\'d love to hear your thoughts on our service.';break;case'inquiry':responseContent='I\\'d be happy to help with your account inquiry. What specific information are you looking for?';break;case'other':responseContent='I understand you have another type of issue. Please describe your concern, and I\\'ll do my best to assist you.';break;default:responseContent='Thank you for selecting an option. How can I assist you further with this?';}const botResponse={type:'bot',content:responseContent,timestamp:new Date(),category:category};setMessages(prev=>[...prev,botResponse]);// Create a ticket if it's a complaint category\nif(['billing','technical','service'].includes(optionId)){// Create ticket with AI-determined category and priority\nconst ticketResult=await createTicket(optionText,category,priority);if(ticketResult&&ticketResult.success){// Add ticket creation confirmation\nconst ticketMessage={type:'bot',content:`I've created a ticket for your ${optionText.toLowerCase()}. Category: ${category}, Priority: ${priority}`,timestamp:new Date(),ticketCreated:true,ticketId:ticketResult.ticketId};setMessages(prev=>[...prev,ticketMessage]);toast.success(`Ticket #${ticketResult.ticketId} has been created for your complaint.`);}}}catch(error){console.error('Error processing option:',error);// Add error message to chat\nconst errorMessage={type:'bot',content:'Sorry, I encountered an error processing your selection. Please try again or type your issue directly.',timestamp:new Date(),isError:true};setMessages(prev=>[...prev,errorMessage]);}finally{setIsLoading(false);}};const handleSubmit=async e=>{e.preventDefault();if(!input.trim()&&!isVoiceInputActive&&!isImageUploadActive)return;// Add user message to chat\nconst userMessage={type:'user',content:input,timestamp:new Date()};setMessages(prev=>[...prev,userMessage]);setInput('');setIsLoading(true);try{// Send message to backend\nconst response=await axios.post('/api/chatbot/message',{message:input,messageType:'text'});// Process with AI features\nconst category=categorizeComplaint(input);const priority=determinePriority(input);// Add initial bot response to chat\nconst initialResponse={type:'bot',content:response.data.message,timestamp:new Date(),suggestTicket:response.data.suggestTicket||false};setMessages(prev=>[...prev,initialResponse]);// If the message suggests creating a ticket, show AI features\nif(response.data.suggestTicket||input.toLowerCase().includes('complaint')||input.toLowerCase().includes('issue')||input.toLowerCase().includes('problem')){// Add AI features message\nconst aiFeatureMessage={type:'bot',content:'I can help you with your complaint using these AI features:',timestamp:new Date(),aiFeatures:[{title:'Automatic Ticket Creation',description:'Upon registering a complaint, the system automatically generates a ticket with all relevant details.'},{title:'Intelligent Categorization',description:'AI will categorize tickets based on predefined categories (e.g., billing, technical, service) using machine learning models.'},{title:'Prioritization System',description:'AI will assign priority levels (urgent, high, medium, low) based on the complaint\\'s nature and keywords.'},{title:'Dynamic Assignment',description:'The system will use AI to intelligently assign tickets to the relevant teams or agents based on expertise, workload, and availability.'}]};setMessages(prev=>[...prev,aiFeatureMessage]);// Create ticket with AI-determined category and priority\nconst ticketResult=await createTicket(input,category,priority);if(ticketResult.success){// Add ticket creation confirmation\nconst ticketMessage={type:'bot',content:`I've analyzed your complaint and created a ticket for you. Category: ${category}, Priority: ${priority}`,timestamp:new Date(),ticketCreated:true,ticketId:ticketResult.ticketId};setMessages(prev=>[...prev,ticketMessage]);toast.success(`Ticket #${ticketResult.ticketId} has been created for your complaint.`);}}}catch(error){console.error('Error sending message:',error);// Add error message to chat\nconst errorMessage={type:'bot',content:'Sorry, I encountered an error processing your request. Please try again later.',timestamp:new Date(),isError:true};setMessages(prev=>[...prev,errorMessage]);toast.error('Failed to process your message. Please try again.');}finally{setIsLoading(false);}};const handleVoiceInput=transcript=>{// Add user voice message to chat\nconst userMessage={type:'user',content:transcript,timestamp:new Date(),isVoice:true};setMessages(prev=>[...prev,userMessage]);setIsLoading(true);setIsVoiceInputActive(false);// Process voice input\nprocessMessage(transcript,'voice');};const handleImageUpload=async imageFile=>{// Add user image message to chat\nconst userMessage={type:'user',content:'Image uploaded',timestamp:new Date(),isImage:true,imageUrl:URL.createObjectURL(imageFile)};setMessages(prev=>[...prev,userMessage]);setIsLoading(true);setIsImageUploadActive(false);try{// Create form data for image upload\nconst formData=new FormData();formData.append('image',imageFile);// Send image to backend for processing\nconst response=await axios.post('/api/chatbot/image',formData,{headers:{'Content-Type':'multipart/form-data'}});// Add bot response to chat\nconst botResponse={type:'bot',content:response.data.message,timestamp:new Date(),detectedObjects:response.data.detectedObjects,ticketCreated:response.data.ticketCreated,ticketId:response.data.ticketId};setMessages(prev=>[...prev,botResponse]);// Show toast if ticket was created\nif(response.data.ticketCreated){toast.success(`Ticket #${response.data.ticketId} has been created for your complaint.`);}}catch(error){console.error('Error processing image:',error);// Add error message to chat\nconst errorMessage={type:'bot',content:'Sorry, I encountered an error processing your image. Please try again later.',timestamp:new Date(),isError:true};setMessages(prev=>[...prev,errorMessage]);toast.error('Failed to process your image. Please try again.');}finally{setIsLoading(false);}};const processMessage=async(message,type)=>{try{// Send message to backend\nconst response=await axios.post('/api/chatbot/message',{message,messageType:type});// Add bot response to chat\nconst botResponse={type:'bot',content:response.data.message,timestamp:new Date(),ticketCreated:response.data.ticketCreated,ticketId:response.data.ticketId};setMessages(prev=>[...prev,botResponse]);// Show toast if ticket was created\nif(response.data.ticketCreated){toast.success(`Ticket #${response.data.ticketId} has been created for your complaint.`);}}catch(error){console.error('Error processing message:',error);// Add error message to chat\nconst errorMessage={type:'bot',content:'Sorry, I encountered an error processing your request. Please try again later.',timestamp:new Date(),isError:true};setMessages(prev=>[...prev,errorMessage]);toast.error('Failed to process your message. Please try again.');}finally{setIsLoading(false);}};const toggleVoiceInput=()=>{setIsVoiceInputActive(!isVoiceInputActive);setIsImageUploadActive(false);};const toggleImageUpload=()=>{setIsImageUploadActive(!isImageUploadActive);setIsVoiceInputActive(false);};return/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white rounded-lg shadow-xl w-full max-w-md h-[500px] flex flex-col\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"bg-primary-600 text-white px-4 py-3 rounded-t-lg flex justify-between items-center\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center\",children:[/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"h-6 w-6 mr-2\",fill:\"none\",viewBox:\"0 0 24 24\",stroke:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{strokeLinecap:\"round\",strokeLinejoin:\"round\",strokeWidth:2,d:\"M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z\"})}),/*#__PURE__*/_jsx(\"h3\",{className:\"font-semibold\",children:\"AI Assistant\"})]}),/*#__PURE__*/_jsx(\"button\",{onClick:onClose,className:\"text-white hover:text-gray-200 focus:outline-none\",\"aria-label\":\"Close chatbot\",children:/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"h-5 w-5\",viewBox:\"0 0 20 20\",fill:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{fillRule:\"evenodd\",d:\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\",clipRule:\"evenodd\"})})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex-1 p-4 overflow-y-auto\",children:[messages.map((message,index)=>/*#__PURE__*/_jsx(ChatMessage,{message:message,onOptionSelect:handleOptionSelect},index)),isLoading&&/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center mt-2\",children:/*#__PURE__*/_jsx(\"div\",{className:\"bg-gray-200 rounded-full p-2 max-w-[80%]\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex space-x-2\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-2 h-2 bg-gray-500 rounded-full animate-bounce\"}),/*#__PURE__*/_jsx(\"div\",{className:\"w-2 h-2 bg-gray-500 rounded-full animate-bounce\",style:{animationDelay:'0.2s'}}),/*#__PURE__*/_jsx(\"div\",{className:\"w-2 h-2 bg-gray-500 rounded-full animate-bounce\",style:{animationDelay:'0.4s'}})]})})}),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]}),isVoiceInputActive&&/*#__PURE__*/_jsx(\"div\",{className:\"px-4 py-2 bg-gray-50 border-t border-gray-200\",children:/*#__PURE__*/_jsx(VoiceInput,{onTranscript:handleVoiceInput,onCancel:()=>setIsVoiceInputActive(false)})}),isImageUploadActive&&/*#__PURE__*/_jsx(\"div\",{className:\"px-4 py-2 bg-gray-50 border-t border-gray-200\",children:/*#__PURE__*/_jsx(ImageUpload,{onImageUpload:handleImageUpload,onCancel:()=>setIsImageUploadActive(false)})}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"p-4 border-t border-gray-200 flex items-center\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:toggleVoiceInput,className:`p-2 rounded-full mr-2 focus:outline-none ${isVoiceInputActive?'bg-red-100 text-red-600':'text-gray-500 hover:text-primary-600'}`,\"aria-label\":\"Voice input\",children:/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"h-5 w-5\",fill:\"none\",viewBox:\"0 0 24 24\",stroke:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{strokeLinecap:\"round\",strokeLinejoin:\"round\",strokeWidth:2,d:\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\"})})}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:toggleImageUpload,className:`p-2 rounded-full mr-2 focus:outline-none ${isImageUploadActive?'bg-blue-100 text-blue-600':'text-gray-500 hover:text-primary-600'}`,\"aria-label\":\"Image upload\",children:/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"h-5 w-5\",fill:\"none\",viewBox:\"0 0 24 24\",stroke:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{strokeLinecap:\"round\",strokeLinejoin:\"round\",strokeWidth:2,d:\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"})})}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:input,onChange:handleInputChange,placeholder:\"Type your message...\",className:\"flex-1 border border-gray-300 rounded-full px-4 py-2 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent\",disabled:isLoading||isVoiceInputActive||isImageUploadActive,ref:inputRef}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"ml-2 bg-primary-600 text-white rounded-full p-2 hover:bg-primary-700 focus:outline-none disabled:opacity-50\",disabled:!input.trim()||isLoading||isVoiceInputActive||isImageUploadActive,\"aria-label\":\"Send message\",children:/*#__PURE__*/_jsx(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",className:\"h-5 w-5\",viewBox:\"0 0 20 20\",fill:\"currentColor\",children:/*#__PURE__*/_jsx(\"path\",{fillRule:\"evenodd\",d:\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 0l-3 3a1 1 0 001.414 1.414L9 9.414V13a1 1 0 102 0V9.414l1.293 1.293a1 1 0 001.414-1.414z\",clipRule:\"evenodd\"})})})]})]});};export default Chatbot;","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","toast","ChatMessage","VoiceInput","ImageUpload","useAI","jsx","_jsx","jsxs","_jsxs","Chatbot","_ref","onClose","messages","setMessages","type","content","timestamp","Date","options","input","setInput","isLoading","setIsLoading","isVoiceInputActive","setIsVoiceInputActive","isImageUploadActive","setIsImageUploadActive","showAIFeatures","setShowAIFeatures","loading","setLoading","complaintCategories","setComplaintCategories","Object","keys","length","prev","updatedMessages","entries","map","_ref2","id","category","text","name","fetchCategories","response","get","console","log","data","error","isProcessing","createTicket","categorizeComplaint","determinePriority","determineAssignment","messagesEndRef","inputRef","scrollToBottom","current","focus","_messagesEndRef$curre","scrollIntoView","behavior","handleInputChange","e","target","value","handleOptionSelect","optionId","optionText","userMessage","isOption","isMainCategory","includes","mainCategory","subCategory","split","priority","categoryData","subcategories","subcategoryOptions","_ref3","botResponse","subcategoryData","problemSolutionContent","problem","solution","step","join","subcategory","ticketResult","success","ticketMessage","ticketCreated","ticketId","ticketFormMessage","isTicketForm","thankYouMessage","_ref4","errorMessage","isError","handleLegacyOptionSelect","responseContent","toLowerCase","handleSubmit","preventDefault","trim","post","message","messageType","initialResponse","suggestTicket","aiFeatureMessage","aiFeatures","title","description","handleVoiceInput","transcript","isVoice","processMessage","handleImageUpload","imageFile","isImage","imageUrl","URL","createObjectURL","formData","FormData","append","headers","detectedObjects","toggleVoiceInput","toggleImageUpload","className","children","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","onClick","fillRule","clipRule","index","onOptionSelect","style","animationDelay","ref","onTranscript","onCancel","onImageUpload","onSubmit","onChange","placeholder","disabled"],"sources":["C:/Users/thava/OneDrive/Desktop/New folder/Complaint-Management-System/frontend/src/components/chatbot/Chatbot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport axios from '../../services/axios';\r\nimport { toast } from 'react-toastify';\r\nimport ChatMessage from './ChatMessage';\r\nimport VoiceInput from './VoiceInput';\r\nimport ImageUpload from './ImageUpload';\r\nimport { useAI } from '../hooks/useAI';\r\n\r\nconst Chatbot = ({ onClose }) => {\r\n  // Initialize with default welcome message\r\n  const [messages, setMessages] = useState([{\r\n    type: 'bot',\r\n    content: 'Hello! I\\'m your AI assistant. How can I help you today? You can type your complaint, use voice input, or upload an image of the issue.',\r\n    timestamp: new Date(),\r\n    options: []\r\n  }]);\r\n  \r\n  // Input state and refs\r\n  const [input, setInput] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isVoiceInputActive, setIsVoiceInputActive] = useState(false);\r\n  const [isImageUploadActive, setIsImageUploadActive] = useState(false);\r\n  const [showAIFeatures, setShowAIFeatures] = useState(false);\r\n  \r\n  // Initialize complaint categories state\r\n  const [loading, setLoading] = useState(false);\r\n  const [complaintCategories, setComplaintCategories] = useState({});\r\n  \r\n  // Update initial message with categories from state\r\n  useEffect(() => {\r\n    // Only update if we have categories\r\n    if (Object.keys(complaintCategories).length > 0) {\r\n      // Update initial message with categories\r\n      setMessages(prev => {\r\n        const updatedMessages = [...prev];\r\n        if (updatedMessages.length > 0) {\r\n          updatedMessages[0] = {\r\n            ...updatedMessages[0],\r\n            options: Object.entries(complaintCategories).map(([id, category]) => ({\r\n              id: id,\r\n              text: category.name\r\n            }))\r\n          };\r\n        }\r\n        return updatedMessages;\r\n      });\r\n    }\r\n  }, [complaintCategories]);\r\n  \r\n  // Fetch categories from API\r\n  useEffect(() => {\r\n    const fetchCategories = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await axios.get('/api/categories/');\r\n        console.log('Categories API response:', response.data);\r\n        setComplaintCategories(response.data);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Error fetching categories:', error);\r\n        toast.error('Failed to load categories. Using default categories.');\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchCategories();\r\n  }, []);\r\n  \r\n  // Use the AI hook for ticket processing\r\n  const { isProcessing, createTicket, categorizeComplaint, determinePriority, determineAssignment } = useAI();\r\n  \r\n  const messagesEndRef = useRef(null);\r\n  const inputRef = useRef(null);\r\n\r\n  // Scroll to bottom of messages\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [messages]);\r\n\r\n  // Focus input field when component mounts\r\n  useEffect(() => {\r\n    if (inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, []);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n  \r\n  // Handle option selection from the chatbot options\r\n  const handleOptionSelect = async (optionId, optionText) => {\r\n    // Add user message showing their selection\r\n    const userMessage = {\r\n      type: 'user',\r\n      content: `I need help with: ${optionText}`,\r\n      timestamp: new Date(),\r\n      isOption: true\r\n    };\r\n    \r\n    setMessages(prev => [...prev, userMessage]);\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      console.log('Selected option:', optionId, optionText);\r\n      console.log('Available categories:', complaintCategories);\r\n      \r\n      // Check if this is a main category or subcategory\r\n      const isMainCategory = Object.keys(complaintCategories).includes(optionId);\r\n      const [mainCategory, subCategory] = isMainCategory ? [optionId, null] : optionId.split('.');\r\n      \r\n      console.log('Is main category:', isMainCategory);\r\n      console.log('Main category:', mainCategory);\r\n      console.log('Subcategory:', subCategory);\r\n      \r\n      // Process the selected option\r\n      const category = mainCategory; // Use the main category ID\r\n      const priority = category === 'technical' || category === 'service' ? 'high' : 'medium';\r\n      \r\n      // If this is a main category, show subcategories\r\n      if (isMainCategory) {\r\n        const categoryData = complaintCategories[mainCategory];\r\n        const subcategories = categoryData.subcategories;\r\n        \r\n        // Create options for subcategories\r\n        const subcategoryOptions = Object.entries(subcategories).map(([id, data]) => ({\r\n          id: `${mainCategory}.${id}`,\r\n          text: data.name\r\n        }));\r\n        \r\n        // Add bot response with subcategories\r\n        const botResponse = {\r\n          type: 'bot',\r\n          content: `Please select a specific issue related to ${categoryData.name}:`,\r\n          timestamp: new Date(),\r\n          options: subcategoryOptions,\r\n          category: mainCategory\r\n        };\r\n        \r\n        setMessages(prev => [...prev, botResponse]);\r\n      } else {\r\n        // This is a subcategory selection\r\n        const categoryData = complaintCategories[mainCategory];\r\n        const subcategoryData = categoryData.subcategories[subCategory];\r\n        \r\n        // Create the problem and solution message\r\n        const problemSolutionContent = `\r\n**Problem:** ${subcategoryData.problem}\r\n\r\n**Solution:**\r\n${subcategoryData.solution.map(step => `â€¢ ${step}`).join('\\n')}\r\n\r\nIf the provided solution does not work, you can click \"Open Ticket\" to get help from our support team.`;\r\n        \r\n        // Add bot response with problem and solution\r\n        const botResponse = {\r\n          type: 'bot',\r\n          content: problemSolutionContent,\r\n          timestamp: new Date(),\r\n          category: mainCategory,\r\n          subcategory: subCategory,\r\n          problem: subcategoryData.problem,\r\n          solution: subcategoryData.solution,\r\n          options: [\r\n            { id: 'open_ticket', text: 'Open Ticket' },\r\n            { id: 'solved', text: 'Issue Solved' }\r\n          ]\r\n        };\r\n        \r\n        setMessages(prev => [...prev, botResponse]);\r\n        \r\n        // If it's a serious issue, create a ticket automatically\r\n        if (['technical.crash', 'billing.duplicate_charges', 'service.unavailable'].includes(`${mainCategory}.${subCategory}`)) {\r\n          // Create ticket with AI-determined category and priority\r\n          const ticketResult = await createTicket(subcategoryData.name, category, priority);\r\n          \r\n          if (ticketResult && ticketResult.success) {\r\n            // Add ticket creation confirmation\r\n            const ticketMessage = {\r\n              type: 'bot',\r\n              content: `I've automatically created a ticket for this issue. Category: ${categoryData.name}, Subcategory: ${subcategoryData.name}, Priority: ${priority}`,\r\n              timestamp: new Date(),\r\n              ticketCreated: true,\r\n              ticketId: ticketResult.ticketId\r\n            };\r\n            \r\n            setMessages(prev => [...prev, ticketMessage]);\r\n            toast.success(`Ticket #${ticketResult.ticketId} has been created for your complaint.`);\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Handle special options\r\n      if (optionId === 'open_ticket') {\r\n        // Show ticket form\r\n        const ticketFormMessage = {\r\n          type: 'bot',\r\n          content: 'Please provide additional details about your issue:',\r\n          timestamp: new Date(),\r\n          isTicketForm: true\r\n        };\r\n        \r\n        setMessages(prev => [...prev, ticketFormMessage]);\r\n      } else if (optionId === 'solved') {\r\n        // Thank the user\r\n        const thankYouMessage = {\r\n          type: 'bot',\r\n          content: 'Great! I\\'m glad the solution helped. Is there anything else I can assist you with?',\r\n          timestamp: new Date(),\r\n          options: Object.entries(complaintCategories).map(([id, category]) => ({\r\n            id: id,\r\n            text: category.name\r\n          }))\r\n        };\r\n        \r\n        setMessages(prev => [...prev, thankYouMessage]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error processing option:', error);\r\n      \r\n      // Add error message to chat\r\n      const errorMessage = {\r\n        type: 'bot',\r\n        content: 'Sorry, I encountered an error processing your selection. Please try again or type your issue directly.',\r\n        timestamp: new Date(),\r\n        isError: true\r\n      };\r\n      \r\n      setMessages(prev => [...prev, errorMessage]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Legacy handleOptionSelect for backward compatibility\r\n  const handleLegacyOptionSelect = async (optionId, optionText) => {\r\n    // Add user message showing their selection\r\n    const userMessage = {\r\n      type: 'user',\r\n      content: `I need help with: ${optionText}`,\r\n      timestamp: new Date(),\r\n      isOption: true\r\n    };\r\n    \r\n    setMessages(prev => [...prev, userMessage]);\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      // Process the selected option\r\n      const category = optionId; // Use the option ID as the category\r\n      const priority = optionId === 'technical' || optionId === 'service' ? 'high' : 'medium';\r\n      \r\n      // Add bot response based on the selected option\r\n      let responseContent = '';\r\n      \r\n      switch(optionId) {\r\n        case 'billing':\r\n          responseContent = 'I understand you\\'re having a billing issue. Could you please provide more details about the problem?';\r\n          break;\r\n        case 'technical':\r\n          responseContent = 'I see you\\'re experiencing a technical problem. Could you describe the issue you\\'re facing in detail?';\r\n          break;\r\n        case 'service':\r\n          responseContent = 'I\\'m sorry to hear you have a service complaint. Please tell me more about the service issue you encountered.';\r\n          break;\r\n        case 'feedback':\r\n          responseContent = 'Thank you for wanting to provide feedback. I\\'d love to hear your thoughts on our service.';\r\n          break;\r\n        case 'inquiry':\r\n          responseContent = 'I\\'d be happy to help with your account inquiry. What specific information are you looking for?';\r\n          break;\r\n        case 'other':\r\n          responseContent = 'I understand you have another type of issue. Please describe your concern, and I\\'ll do my best to assist you.';\r\n          break;\r\n        default:\r\n          responseContent = 'Thank you for selecting an option. How can I assist you further with this?';\r\n      }\r\n      \r\n      const botResponse = {\r\n        type: 'bot',\r\n        content: responseContent,\r\n        timestamp: new Date(),\r\n        category: category\r\n      };\r\n      \r\n      setMessages(prev => [...prev, botResponse]);\r\n      \r\n      // Create a ticket if it's a complaint category\r\n      if (['billing', 'technical', 'service'].includes(optionId)) {\r\n        // Create ticket with AI-determined category and priority\r\n        const ticketResult = await createTicket(optionText, category, priority);\r\n        \r\n        if (ticketResult && ticketResult.success) {\r\n          // Add ticket creation confirmation\r\n          const ticketMessage = {\r\n            type: 'bot',\r\n            content: `I've created a ticket for your ${optionText.toLowerCase()}. Category: ${category}, Priority: ${priority}`,\r\n            timestamp: new Date(),\r\n            ticketCreated: true,\r\n            ticketId: ticketResult.ticketId\r\n          };\r\n          \r\n          setMessages(prev => [...prev, ticketMessage]);\r\n          toast.success(`Ticket #${ticketResult.ticketId} has been created for your complaint.`);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error processing option:', error);\r\n      \r\n      // Add error message to chat\r\n      const errorMessage = {\r\n        type: 'bot',\r\n        content: 'Sorry, I encountered an error processing your selection. Please try again or type your issue directly.',\r\n        timestamp: new Date(),\r\n        isError: true\r\n      };\r\n      \r\n      setMessages(prev => [...prev, errorMessage]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!input.trim() && !isVoiceInputActive && !isImageUploadActive) return;\r\n\r\n    // Add user message to chat\r\n    const userMessage = {\r\n      type: 'user',\r\n      content: input,\r\n      timestamp: new Date()\r\n    };\r\n    \r\n    setMessages(prev => [...prev, userMessage]);\r\n    setInput('');\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      // Send message to backend\r\n      const response = await axios.post('/api/chatbot/message', {\r\n        message: input,\r\n        messageType: 'text'\r\n      });\r\n\r\n      // Process with AI features\r\n      const category = categorizeComplaint(input);\r\n      const priority = determinePriority(input);\r\n      \r\n      // Add initial bot response to chat\r\n      const initialResponse = {\r\n        type: 'bot',\r\n        content: response.data.message,\r\n        timestamp: new Date(),\r\n        suggestTicket: response.data.suggestTicket || false\r\n      };\r\n      \r\n      setMessages(prev => [...prev, initialResponse]);\r\n      \r\n      // If the message suggests creating a ticket, show AI features\r\n      if (response.data.suggestTicket || input.toLowerCase().includes('complaint') || \r\n          input.toLowerCase().includes('issue') || input.toLowerCase().includes('problem')) {\r\n        \r\n        // Add AI features message\r\n        const aiFeatureMessage = {\r\n          type: 'bot',\r\n          content: 'I can help you with your complaint using these AI features:',\r\n          timestamp: new Date(),\r\n          aiFeatures: [\r\n            { title: 'Automatic Ticket Creation', description: 'Upon registering a complaint, the system automatically generates a ticket with all relevant details.' },\r\n            { title: 'Intelligent Categorization', description: 'AI will categorize tickets based on predefined categories (e.g., billing, technical, service) using machine learning models.' },\r\n            { title: 'Prioritization System', description: 'AI will assign priority levels (urgent, high, medium, low) based on the complaint\\'s nature and keywords.' },\r\n            { title: 'Dynamic Assignment', description: 'The system will use AI to intelligently assign tickets to the relevant teams or agents based on expertise, workload, and availability.' }\r\n          ]\r\n        };\r\n        \r\n        setMessages(prev => [...prev, aiFeatureMessage]);\r\n        \r\n        // Create ticket with AI-determined category and priority\r\n        const ticketResult = await createTicket(input, category, priority);\r\n        \r\n        if (ticketResult.success) {\r\n          // Add ticket creation confirmation\r\n          const ticketMessage = {\r\n            type: 'bot',\r\n            content: `I've analyzed your complaint and created a ticket for you. Category: ${category}, Priority: ${priority}`,\r\n            timestamp: new Date(),\r\n            ticketCreated: true,\r\n            ticketId: ticketResult.ticketId\r\n          };\r\n          \r\n          setMessages(prev => [...prev, ticketMessage]);\r\n          toast.success(`Ticket #${ticketResult.ticketId} has been created for your complaint.`);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      \r\n      // Add error message to chat\r\n      const errorMessage = {\r\n        type: 'bot',\r\n        content: 'Sorry, I encountered an error processing your request. Please try again later.',\r\n        timestamp: new Date(),\r\n        isError: true\r\n      };\r\n      \r\n      setMessages(prev => [...prev, errorMessage]);\r\n      toast.error('Failed to process your message. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleVoiceInput = (transcript) => {\r\n    // Add user voice message to chat\r\n    const userMessage = {\r\n      type: 'user',\r\n      content: transcript,\r\n      timestamp: new Date(),\r\n      isVoice: true\r\n    };\r\n    \r\n    setMessages(prev => [...prev, userMessage]);\r\n    setIsLoading(true);\r\n    setIsVoiceInputActive(false);\r\n\r\n    // Process voice input\r\n    processMessage(transcript, 'voice');\r\n  };\r\n\r\n  const handleImageUpload = async (imageFile) => {\r\n    // Add user image message to chat\r\n    const userMessage = {\r\n      type: 'user',\r\n      content: 'Image uploaded',\r\n      timestamp: new Date(),\r\n      isImage: true,\r\n      imageUrl: URL.createObjectURL(imageFile)\r\n    };\r\n    \r\n    setMessages(prev => [...prev, userMessage]);\r\n    setIsLoading(true);\r\n    setIsImageUploadActive(false);\r\n\r\n    try {\r\n      // Create form data for image upload\r\n      const formData = new FormData();\r\n      formData.append('image', imageFile);\r\n\r\n      // Send image to backend for processing\r\n      const response = await axios.post('/api/chatbot/image', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      });\r\n\r\n      // Add bot response to chat\r\n      const botResponse = {\r\n        type: 'bot',\r\n        content: response.data.message,\r\n        timestamp: new Date(),\r\n        detectedObjects: response.data.detectedObjects,\r\n        ticketCreated: response.data.ticketCreated,\r\n        ticketId: response.data.ticketId\r\n      };\r\n\r\n      setMessages(prev => [...prev, botResponse]);\r\n\r\n      // Show toast if ticket was created\r\n      if (response.data.ticketCreated) {\r\n        toast.success(`Ticket #${response.data.ticketId} has been created for your complaint.`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error processing image:', error);\r\n      \r\n      // Add error message to chat\r\n      const errorMessage = {\r\n        type: 'bot',\r\n        content: 'Sorry, I encountered an error processing your image. Please try again later.',\r\n        timestamp: new Date(),\r\n        isError: true\r\n      };\r\n      \r\n      setMessages(prev => [...prev, errorMessage]);\r\n      toast.error('Failed to process your image. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const processMessage = async (message, type) => {\r\n    try {\r\n      // Send message to backend\r\n      const response = await axios.post('/api/chatbot/message', {\r\n        message,\r\n        messageType: type\r\n      });\r\n\r\n      // Add bot response to chat\r\n      const botResponse = {\r\n        type: 'bot',\r\n        content: response.data.message,\r\n        timestamp: new Date(),\r\n        ticketCreated: response.data.ticketCreated,\r\n        ticketId: response.data.ticketId\r\n      };\r\n\r\n      setMessages(prev => [...prev, botResponse]);\r\n\r\n      // Show toast if ticket was created\r\n      if (response.data.ticketCreated) {\r\n        toast.success(`Ticket #${response.data.ticketId} has been created for your complaint.`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error processing message:', error);\r\n      \r\n      // Add error message to chat\r\n      const errorMessage = {\r\n        type: 'bot',\r\n        content: 'Sorry, I encountered an error processing your request. Please try again later.',\r\n        timestamp: new Date(),\r\n        isError: true\r\n      };\r\n      \r\n      setMessages(prev => [...prev, errorMessage]);\r\n      toast.error('Failed to process your message. Please try again.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const toggleVoiceInput = () => {\r\n    setIsVoiceInputActive(!isVoiceInputActive);\r\n    setIsImageUploadActive(false);\r\n  };\r\n\r\n  const toggleImageUpload = () => {\r\n    setIsImageUploadActive(!isImageUploadActive);\r\n    setIsVoiceInputActive(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-xl w-full max-w-md h-[500px] flex flex-col\">\r\n      {/* Chatbot Header */}\r\n      <div className=\"bg-primary-600 text-white px-4 py-3 rounded-t-lg flex justify-between items-center\">\r\n        <div className=\"flex items-center\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z\" />\r\n          </svg>\r\n          <h3 className=\"font-semibold\">AI Assistant</h3>\r\n        </div>\r\n        <button \r\n          onClick={onClose}\r\n          className=\"text-white hover:text-gray-200 focus:outline-none\"\r\n          aria-label=\"Close chatbot\"\r\n        >\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n            <path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n          </svg>\r\n        </button>\r\n      </div>\r\n\r\n      {/* Messages Container */}\r\n      <div className=\"flex-1 p-4 overflow-y-auto\">\r\n        {messages.map((message, index) => (\r\n          <ChatMessage \r\n            key={index} \r\n            message={message} \r\n            onOptionSelect={handleOptionSelect}\r\n          />\r\n        ))}\r\n        {isLoading && (\r\n          <div className=\"flex items-center mt-2\">\r\n            <div className=\"bg-gray-200 rounded-full p-2 max-w-[80%]\">\r\n              <div className=\"flex space-x-2\">\r\n                <div className=\"w-2 h-2 bg-gray-500 rounded-full animate-bounce\"></div>\r\n                <div className=\"w-2 h-2 bg-gray-500 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\r\n                <div className=\"w-2 h-2 bg-gray-500 rounded-full animate-bounce\" style={{ animationDelay: '0.4s' }}></div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n\r\n      {/* Voice Input Component */}\r\n      {isVoiceInputActive && (\r\n        <div className=\"px-4 py-2 bg-gray-50 border-t border-gray-200\">\r\n          <VoiceInput onTranscript={handleVoiceInput} onCancel={() => setIsVoiceInputActive(false)} />\r\n        </div>\r\n      )}\r\n\r\n      {/* Image Upload Component */}\r\n      {isImageUploadActive && (\r\n        <div className=\"px-4 py-2 bg-gray-50 border-t border-gray-200\">\r\n          <ImageUpload onImageUpload={handleImageUpload} onCancel={() => setIsImageUploadActive(false)} />\r\n        </div>\r\n      )}\r\n\r\n      {/* Input Form */}\r\n      <form onSubmit={handleSubmit} className=\"p-4 border-t border-gray-200 flex items-center\">\r\n        <button \r\n          type=\"button\" \r\n          onClick={toggleVoiceInput}\r\n          className={`p-2 rounded-full mr-2 focus:outline-none ${isVoiceInputActive ? 'bg-red-100 text-red-600' : 'text-gray-500 hover:text-primary-600'}`}\r\n          aria-label=\"Voice input\"\r\n        >\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\" />\r\n          </svg>\r\n        </button>\r\n        <button \r\n          type=\"button\" \r\n          onClick={toggleImageUpload}\r\n          className={`p-2 rounded-full mr-2 focus:outline-none ${isImageUploadActive ? 'bg-blue-100 text-blue-600' : 'text-gray-500 hover:text-primary-600'}`}\r\n          aria-label=\"Image upload\"\r\n        >\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" />\r\n          </svg>\r\n        </button>\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Type your message...\"\r\n          className=\"flex-1 border border-gray-300 rounded-full px-4 py-2 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\r\n          disabled={isLoading || isVoiceInputActive || isImageUploadActive}\r\n          ref={inputRef}\r\n        />\r\n        <button \r\n          type=\"submit\" \r\n          className=\"ml-2 bg-primary-600 text-white rounded-full p-2 hover:bg-primary-700 focus:outline-none disabled:opacity-50\"\r\n          disabled={!input.trim() || isLoading || isVoiceInputActive || isImageUploadActive}\r\n          aria-label=\"Send message\"\r\n        >\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n            <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 0l-3 3a1 1 0 001.414 1.414L9 9.414V13a1 1 0 102 0V9.414l1.293 1.293a1 1 0 001.414-1.414z\" clipRule=\"evenodd\" />\r\n          </svg>\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}