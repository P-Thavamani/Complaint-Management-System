{"ast":null,"code":"import{useState}from'react';import axios from'../../services/axios';export const useAI=()=>{const[isProcessing,setIsProcessing]=useState(false);// Function to handle automatic ticket creation\nconst createTicket=async(message,category,priority)=>{setIsProcessing(true);try{const response=await axios.post('/api/complaints',{subject:message.substring(0,50)+(message.length>50?'...':''),description:message,category:category||'other',priority:priority||'medium'});setIsProcessing(false);return{success:true,ticketId:response.data.id,message:`Ticket #${response.data.id} has been created successfully.`};}catch(error){console.error('Error creating ticket:',error);setIsProcessing(false);return{success:false,message:'Failed to create ticket. Please try again.'};}};// Function to categorize complaint based on content\nconst categorizeComplaint=message=>{// Categories with their related keywords\nconst categories={hardware:['computer','laptop','printer','device','hardware','monitor','keyboard','mouse','broken','damaged'],software:['software','program','application','app','system','bug','error','crash','freezing','slow'],network:['network','internet','wifi','connection','server','down','slow','access','connectivity'],service:['service','support','help','assistance','response','delay','waiting','customer service'],billing:['bill','invoice','payment','charge','subscription','pricing','cost','fee','overcharge']};// Convert message to lowercase for case-insensitive matching\nconst lowerMessage=message.toLowerCase();// Check each category for keyword matches\nfor(const[category,keywords]of Object.entries(categories)){if(keywords.some(keyword=>lowerMessage.includes(keyword))){return category;}}// Default category if no matches found\nreturn'other';};// Function to determine priority based on message content\nconst determinePriority=message=>{// Priority keywords\nconst priorities={urgent:['urgent','emergency','immediate','critical','asap','serious','severe','outage'],high:['high','important','priority','significant','major','crucial'],medium:['medium','moderate','average','standard','normal'],low:['low','minor','trivial','small','not urgent','when possible']};// Convert message to lowercase for case-insensitive matching\nconst lowerMessage=message.toLowerCase();// Check for priority keywords\nif(priorities.urgent.some(keyword=>lowerMessage.includes(keyword))){return'urgent';}else if(priorities.high.some(keyword=>lowerMessage.includes(keyword))){return'high';}else if(priorities.low.some(keyword=>lowerMessage.includes(keyword))){return'low';}// Default priority\nreturn'medium';};// Function to determine the best team/agent for assignment\nconst determineAssignment=async(category,priority)=>{try{var _sortedAgents$;// Get available agents/teams\nconst response=await axios.get('/api/admin/agents');const agents=response.data;// Filter agents by expertise in the category\nconst qualifiedAgents=agents.filter(agent=>agent.expertise.includes(category)||agent.expertise.includes('all'));if(qualifiedAgents.length===0){// If no qualified agents, assign to default team\nreturn'support-team';}// Sort by workload (ascending) and availability\nconst sortedAgents=qualifiedAgents.sort((a,b)=>{// Prioritize available agents\nif(a.available&&!b.available)return-1;if(!a.available&&b.available)return 1;// Then sort by workload\nreturn a.currentWorkload-b.currentWorkload;});// For urgent tickets, assign to agent with highest expertise level\nif(priority==='urgent'){const expertAgents=sortedAgents.filter(agent=>agent.expertiseLevel>=4);if(expertAgents.length>0){return expertAgents[0].id;}}// Otherwise assign to first available agent with lowest workload\nreturn((_sortedAgents$=sortedAgents[0])===null||_sortedAgents$===void 0?void 0:_sortedAgents$.id)||'support-team';}catch(error){console.error('Error determining assignment:',error);return'support-team';// Default fallback\n}};return{isProcessing,createTicket,categorizeComplaint,determinePriority,determineAssignment};};","map":{"version":3,"names":["useState","axios","useAI","isProcessing","setIsProcessing","createTicket","message","category","priority","response","post","subject","substring","length","description","success","ticketId","data","id","error","console","categorizeComplaint","categories","hardware","software","network","service","billing","lowerMessage","toLowerCase","keywords","Object","entries","some","keyword","includes","determinePriority","priorities","urgent","high","medium","low","determineAssignment","_sortedAgents$","get","agents","qualifiedAgents","filter","agent","expertise","sortedAgents","sort","a","b","available","currentWorkload","expertAgents","expertiseLevel"],"sources":["C:/Users/thava/OneDrive/Desktop/New folder/Complaint-Management-System/frontend/src/components/hooks/useAI.js"],"sourcesContent":["import { useState } from 'react';\nimport axios from '../../services/axios';\n\nexport const useAI = () => {\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Function to handle automatic ticket creation\n  const createTicket = async (message, category, priority) => {\n    setIsProcessing(true);\n    try {\n      const response = await axios.post('/api/complaints', {\n        subject: message.substring(0, 50) + (message.length > 50 ? '...' : ''),\n        description: message,\n        category: category || 'other',\n        priority: priority || 'medium'\n      });\n      \n      setIsProcessing(false);\n      return {\n        success: true,\n        ticketId: response.data.id,\n        message: `Ticket #${response.data.id} has been created successfully.`\n      };\n    } catch (error) {\n      console.error('Error creating ticket:', error);\n      setIsProcessing(false);\n      return {\n        success: false,\n        message: 'Failed to create ticket. Please try again.'\n      };\n    }\n  };\n\n  // Function to categorize complaint based on content\n  const categorizeComplaint = (message) => {\n    // Categories with their related keywords\n    const categories = {\n      hardware: ['computer', 'laptop', 'printer', 'device', 'hardware', 'monitor', 'keyboard', 'mouse', 'broken', 'damaged'],\n      software: ['software', 'program', 'application', 'app', 'system', 'bug', 'error', 'crash', 'freezing', 'slow'],\n      network: ['network', 'internet', 'wifi', 'connection', 'server', 'down', 'slow', 'access', 'connectivity'],\n      service: ['service', 'support', 'help', 'assistance', 'response', 'delay', 'waiting', 'customer service'],\n      billing: ['bill', 'invoice', 'payment', 'charge', 'subscription', 'pricing', 'cost', 'fee', 'overcharge']\n    };\n    \n    // Convert message to lowercase for case-insensitive matching\n    const lowerMessage = message.toLowerCase();\n    \n    // Check each category for keyword matches\n    for (const [category, keywords] of Object.entries(categories)) {\n      if (keywords.some(keyword => lowerMessage.includes(keyword))) {\n        return category;\n      }\n    }\n    \n    // Default category if no matches found\n    return 'other';\n  };\n\n  // Function to determine priority based on message content\n  const determinePriority = (message) => {\n    // Priority keywords\n    const priorities = {\n      urgent: ['urgent', 'emergency', 'immediate', 'critical', 'asap', 'serious', 'severe', 'outage'],\n      high: ['high', 'important', 'priority', 'significant', 'major', 'crucial'],\n      medium: ['medium', 'moderate', 'average', 'standard', 'normal'],\n      low: ['low', 'minor', 'trivial', 'small', 'not urgent', 'when possible']\n    };\n    \n    // Convert message to lowercase for case-insensitive matching\n    const lowerMessage = message.toLowerCase();\n    \n    // Check for priority keywords\n    if (priorities.urgent.some(keyword => lowerMessage.includes(keyword))) {\n      return 'urgent';\n    } else if (priorities.high.some(keyword => lowerMessage.includes(keyword))) {\n      return 'high';\n    } else if (priorities.low.some(keyword => lowerMessage.includes(keyword))) {\n      return 'low';\n    }\n    \n    // Default priority\n    return 'medium';\n  };\n\n  // Function to determine the best team/agent for assignment\n  const determineAssignment = async (category, priority) => {\n    try {\n      // Get available agents/teams\n      const response = await axios.get('/api/admin/agents');\n      const agents = response.data;\n      \n      // Filter agents by expertise in the category\n      const qualifiedAgents = agents.filter(agent => \n        agent.expertise.includes(category) || agent.expertise.includes('all')\n      );\n      \n      if (qualifiedAgents.length === 0) {\n        // If no qualified agents, assign to default team\n        return 'support-team';\n      }\n      \n      // Sort by workload (ascending) and availability\n      const sortedAgents = qualifiedAgents.sort((a, b) => {\n        // Prioritize available agents\n        if (a.available && !b.available) return -1;\n        if (!a.available && b.available) return 1;\n        \n        // Then sort by workload\n        return a.currentWorkload - b.currentWorkload;\n      });\n      \n      // For urgent tickets, assign to agent with highest expertise level\n      if (priority === 'urgent') {\n        const expertAgents = sortedAgents.filter(agent => agent.expertiseLevel >= 4);\n        if (expertAgents.length > 0) {\n          return expertAgents[0].id;\n        }\n      }\n      \n      // Otherwise assign to first available agent with lowest workload\n      return sortedAgents[0]?.id || 'support-team';\n    } catch (error) {\n      console.error('Error determining assignment:', error);\n      return 'support-team'; // Default fallback\n    }\n  };\n\n  return {\n    isProcessing,\n    createTicket,\n    categorizeComplaint,\n    determinePriority,\n    determineAssignment\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}