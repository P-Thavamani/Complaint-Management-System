{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport axios from 'axios';\nexport const useAI = () => {\n  _s();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Function to handle automatic ticket creation\n  const createTicket = async (message, category, priority) => {\n    setIsProcessing(true);\n    try {\n      const response = await axios.post('/api/complaints', {\n        subject: message.substring(0, 50) + (message.length > 50 ? '...' : ''),\n        description: message,\n        category: category || 'other',\n        priority: priority || 'medium'\n      });\n      setIsProcessing(false);\n      return {\n        success: true,\n        ticketId: response.data.id,\n        message: `Ticket #${response.data.id} has been created successfully.`\n      };\n    } catch (error) {\n      console.error('Error creating ticket:', error);\n      setIsProcessing(false);\n      return {\n        success: false,\n        message: 'Failed to create ticket. Please try again.'\n      };\n    }\n  };\n\n  // Function to categorize complaint based on content\n  const categorizeComplaint = message => {\n    // Categories with their related keywords\n    const categories = {\n      hardware: ['computer', 'laptop', 'printer', 'device', 'hardware', 'monitor', 'keyboard', 'mouse', 'broken', 'damaged'],\n      software: ['software', 'program', 'application', 'app', 'system', 'bug', 'error', 'crash', 'freezing', 'slow'],\n      network: ['network', 'internet', 'wifi', 'connection', 'server', 'down', 'slow', 'access', 'connectivity'],\n      service: ['service', 'support', 'help', 'assistance', 'response', 'delay', 'waiting', 'customer service'],\n      billing: ['bill', 'invoice', 'payment', 'charge', 'subscription', 'pricing', 'cost', 'fee', 'overcharge']\n    };\n\n    // Convert message to lowercase for case-insensitive matching\n    const lowerMessage = message.toLowerCase();\n\n    // Check each category for keyword matches\n    for (const [category, keywords] of Object.entries(categories)) {\n      if (keywords.some(keyword => lowerMessage.includes(keyword))) {\n        return category;\n      }\n    }\n\n    // Default category if no matches found\n    return 'other';\n  };\n\n  // Function to determine priority based on message content\n  const determinePriority = message => {\n    // Priority keywords\n    const priorities = {\n      urgent: ['urgent', 'emergency', 'immediate', 'critical', 'asap', 'serious', 'severe', 'outage'],\n      high: ['high', 'important', 'priority', 'significant', 'major', 'crucial'],\n      medium: ['medium', 'moderate', 'average', 'standard', 'normal'],\n      low: ['low', 'minor', 'trivial', 'small', 'not urgent', 'when possible']\n    };\n\n    // Convert message to lowercase for case-insensitive matching\n    const lowerMessage = message.toLowerCase();\n\n    // Check for priority keywords\n    if (priorities.urgent.some(keyword => lowerMessage.includes(keyword))) {\n      return 'urgent';\n    } else if (priorities.high.some(keyword => lowerMessage.includes(keyword))) {\n      return 'high';\n    } else if (priorities.low.some(keyword => lowerMessage.includes(keyword))) {\n      return 'low';\n    }\n\n    // Default priority\n    return 'medium';\n  };\n\n  // Function to determine the best team/agent for assignment\n  const determineAssignment = async (category, priority) => {\n    try {\n      var _sortedAgents$;\n      // Get available agents/teams\n      const response = await axios.get('/api/admin/agents');\n      const agents = response.data;\n\n      // Filter agents by expertise in the category\n      const qualifiedAgents = agents.filter(agent => agent.expertise.includes(category) || agent.expertise.includes('all'));\n      if (qualifiedAgents.length === 0) {\n        // If no qualified agents, assign to default team\n        return 'support-team';\n      }\n\n      // Sort by workload (ascending) and availability\n      const sortedAgents = qualifiedAgents.sort((a, b) => {\n        // Prioritize available agents\n        if (a.available && !b.available) return -1;\n        if (!a.available && b.available) return 1;\n\n        // Then sort by workload\n        return a.currentWorkload - b.currentWorkload;\n      });\n\n      // For urgent tickets, assign to agent with highest expertise level\n      if (priority === 'urgent') {\n        const expertAgents = sortedAgents.filter(agent => agent.expertiseLevel >= 4);\n        if (expertAgents.length > 0) {\n          return expertAgents[0].id;\n        }\n      }\n\n      // Otherwise assign to first available agent with lowest workload\n      return ((_sortedAgents$ = sortedAgents[0]) === null || _sortedAgents$ === void 0 ? void 0 : _sortedAgents$.id) || 'support-team';\n    } catch (error) {\n      console.error('Error determining assignment:', error);\n      return 'support-team'; // Default fallback\n    }\n  };\n  return {\n    isProcessing,\n    createTicket,\n    categorizeComplaint,\n    determinePriority,\n    determineAssignment\n  };\n};\n_s(useAI, \"23doSrFnpDt6GWBaV15L/gfAQhY=\");","map":{"version":3,"names":["useState","axios","useAI","_s","isProcessing","setIsProcessing","createTicket","message","category","priority","response","post","subject","substring","length","description","success","ticketId","data","id","error","console","categorizeComplaint","categories","hardware","software","network","service","billing","lowerMessage","toLowerCase","keywords","Object","entries","some","keyword","includes","determinePriority","priorities","urgent","high","medium","low","determineAssignment","_sortedAgents$","get","agents","qualifiedAgents","filter","agent","expertise","sortedAgents","sort","a","b","available","currentWorkload","expertAgents","expertiseLevel"],"sources":["C:/Users/thava/OneDrive/Desktop/New folder/Complaint-Management-System/frontend/src/components/hooks/useAI.js"],"sourcesContent":["import { useState } from 'react';\nimport axios from 'axios';\n\nexport const useAI = () => {\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Function to handle automatic ticket creation\n  const createTicket = async (message, category, priority) => {\n    setIsProcessing(true);\n    try {\n      const response = await axios.post('/api/complaints', {\n        subject: message.substring(0, 50) + (message.length > 50 ? '...' : ''),\n        description: message,\n        category: category || 'other',\n        priority: priority || 'medium'\n      });\n      \n      setIsProcessing(false);\n      return {\n        success: true,\n        ticketId: response.data.id,\n        message: `Ticket #${response.data.id} has been created successfully.`\n      };\n    } catch (error) {\n      console.error('Error creating ticket:', error);\n      setIsProcessing(false);\n      return {\n        success: false,\n        message: 'Failed to create ticket. Please try again.'\n      };\n    }\n  };\n\n  // Function to categorize complaint based on content\n  const categorizeComplaint = (message) => {\n    // Categories with their related keywords\n    const categories = {\n      hardware: ['computer', 'laptop', 'printer', 'device', 'hardware', 'monitor', 'keyboard', 'mouse', 'broken', 'damaged'],\n      software: ['software', 'program', 'application', 'app', 'system', 'bug', 'error', 'crash', 'freezing', 'slow'],\n      network: ['network', 'internet', 'wifi', 'connection', 'server', 'down', 'slow', 'access', 'connectivity'],\n      service: ['service', 'support', 'help', 'assistance', 'response', 'delay', 'waiting', 'customer service'],\n      billing: ['bill', 'invoice', 'payment', 'charge', 'subscription', 'pricing', 'cost', 'fee', 'overcharge']\n    };\n    \n    // Convert message to lowercase for case-insensitive matching\n    const lowerMessage = message.toLowerCase();\n    \n    // Check each category for keyword matches\n    for (const [category, keywords] of Object.entries(categories)) {\n      if (keywords.some(keyword => lowerMessage.includes(keyword))) {\n        return category;\n      }\n    }\n    \n    // Default category if no matches found\n    return 'other';\n  };\n\n  // Function to determine priority based on message content\n  const determinePriority = (message) => {\n    // Priority keywords\n    const priorities = {\n      urgent: ['urgent', 'emergency', 'immediate', 'critical', 'asap', 'serious', 'severe', 'outage'],\n      high: ['high', 'important', 'priority', 'significant', 'major', 'crucial'],\n      medium: ['medium', 'moderate', 'average', 'standard', 'normal'],\n      low: ['low', 'minor', 'trivial', 'small', 'not urgent', 'when possible']\n    };\n    \n    // Convert message to lowercase for case-insensitive matching\n    const lowerMessage = message.toLowerCase();\n    \n    // Check for priority keywords\n    if (priorities.urgent.some(keyword => lowerMessage.includes(keyword))) {\n      return 'urgent';\n    } else if (priorities.high.some(keyword => lowerMessage.includes(keyword))) {\n      return 'high';\n    } else if (priorities.low.some(keyword => lowerMessage.includes(keyword))) {\n      return 'low';\n    }\n    \n    // Default priority\n    return 'medium';\n  };\n\n  // Function to determine the best team/agent for assignment\n  const determineAssignment = async (category, priority) => {\n    try {\n      // Get available agents/teams\n      const response = await axios.get('/api/admin/agents');\n      const agents = response.data;\n      \n      // Filter agents by expertise in the category\n      const qualifiedAgents = agents.filter(agent => \n        agent.expertise.includes(category) || agent.expertise.includes('all')\n      );\n      \n      if (qualifiedAgents.length === 0) {\n        // If no qualified agents, assign to default team\n        return 'support-team';\n      }\n      \n      // Sort by workload (ascending) and availability\n      const sortedAgents = qualifiedAgents.sort((a, b) => {\n        // Prioritize available agents\n        if (a.available && !b.available) return -1;\n        if (!a.available && b.available) return 1;\n        \n        // Then sort by workload\n        return a.currentWorkload - b.currentWorkload;\n      });\n      \n      // For urgent tickets, assign to agent with highest expertise level\n      if (priority === 'urgent') {\n        const expertAgents = sortedAgents.filter(agent => agent.expertiseLevel >= 4);\n        if (expertAgents.length > 0) {\n          return expertAgents[0].id;\n        }\n      }\n      \n      // Otherwise assign to first available agent with lowest workload\n      return sortedAgents[0]?.id || 'support-team';\n    } catch (error) {\n      console.error('Error determining assignment:', error);\n      return 'support-team'; // Default fallback\n    }\n  };\n\n  return {\n    isProcessing,\n    createTicket,\n    categorizeComplaint,\n    determinePriority,\n    determineAssignment\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}